// Copyright 1998-2016 Epic Games, Inc. All Rights Reserved.
/*===========================================================================
	Boilerplate C++ definitions for a single module.
	This is automatically generated by UnrealHeaderTool.
	DO NOT modify this manually! Edit the corresponding .h files instead!
===========================================================================*/

#include "Private/CustomGravityPluginPrivatePCH.h"
#include "GeneratedCppIncludes.h"
#include "CustomGravityPlugin.generated.dep.h"
PRAGMA_DISABLE_DEPRECATION_WARNINGS
void EmptyLinkFunctionForGeneratedCode1CustomGravityPlugin() {}
static class UEnum* EForceMode_StaticEnum()
{
	extern CUSTOMGRAVITYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_EForceMode();
		Singleton = GetStaticEnum(Z_Construct_UEnum_CustomGravityPlugin_EForceMode, Z_Construct_UPackage__Script_CustomGravityPlugin(), TEXT("EForceMode"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EForceMode(EForceMode_StaticEnum, TEXT("/Script/CustomGravityPlugin"), TEXT("EForceMode"), false, nullptr, nullptr);
static class UEnum* EGravityType_StaticEnum()
{
	extern CUSTOMGRAVITYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_EGravityType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_CustomGravityPlugin_EGravityType, Z_Construct_UPackage__Script_CustomGravityPlugin(), TEXT("EGravityType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EGravityType(EGravityType_StaticEnum, TEXT("/Script/CustomGravityPlugin"), TEXT("EGravityType"), false, nullptr, nullptr);
class UScriptStruct* FGravityInfo::StaticStruct()
{
	extern CUSTOMGRAVITYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern CUSTOMGRAVITYPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FGravityInfo();
		extern CUSTOMGRAVITYPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FGravityInfo_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FGravityInfo, Z_Construct_UPackage__Script_CustomGravityPlugin(), TEXT("GravityInfo"), sizeof(FGravityInfo), Get_Z_Construct_UScriptStruct_FGravityInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FGravityInfo(FGravityInfo::StaticStruct, TEXT("/Script/CustomGravityPlugin"), TEXT("GravityInfo"), false, nullptr, nullptr);
static struct FScriptStruct_CustomGravityPlugin_StaticRegisterNativesFGravityInfo
{
	FScriptStruct_CustomGravityPlugin_StaticRegisterNativesFGravityInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("GravityInfo")),new UScriptStruct::TCppStructOps<FGravityInfo>);
	}
} ScriptStruct_CustomGravityPlugin_StaticRegisterNativesFGravityInfo;
	void UCustomGravityManager::StaticRegisterNativesUCustomGravityManager()
	{
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "Conv_ForceModeToString",(Native)&UCustomGravityManager::execConv_ForceModeToString);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "Conv_GravityInfoToString",(Native)&UCustomGravityManager::execConv_GravityInfoToString);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "Conv_GravityTypeToString",(Native)&UCustomGravityManager::execConv_GravityTypeToString);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "GetGlobalCustomGravityDirection",(Native)&UCustomGravityManager::execGetGlobalCustomGravityDirection);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "GetGlobalCustomGravityForceMode",(Native)&UCustomGravityManager::execGetGlobalCustomGravityForceMode);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "GetGlobalCustomGravityInfo",(Native)&UCustomGravityManager::execGetGlobalCustomGravityInfo);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "GetGlobalCustomGravityPower",(Native)&UCustomGravityManager::execGetGlobalCustomGravityPower);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "SetGlobalCustomGravityDirection",(Native)&UCustomGravityManager::execSetGlobalCustomGravityDirection);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "SetGlobalCustomGravityForceMode",(Native)&UCustomGravityManager::execSetGlobalCustomGravityForceMode);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "SetGlobalCustomGravityInfo",(Native)&UCustomGravityManager::execSetGlobalCustomGravityInfo);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityManager::StaticClass(), "SetGlobalCustomGravityPower",(Native)&UCustomGravityManager::execSetGlobalCustomGravityPower);
	}
	IMPLEMENT_CLASS(UCustomGravityManager, 2008827899);
	void UCustomGravityComponent::StaticRegisterNativesUCustomGravityComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityComponent::StaticClass(), "ClearCurrentPlanet",(Native)&UCustomGravityComponent::execClearCurrentPlanet);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityComponent::StaticClass(), "GetCurrentGravityDirection",(Native)&UCustomGravityComponent::execGetCurrentGravityDirection);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityComponent::StaticClass(), "GetCurrentGravityInfo",(Native)&UCustomGravityComponent::execGetCurrentGravityInfo);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityComponent::StaticClass(), "GetCurrentGravityPower",(Native)&UCustomGravityComponent::execGetCurrentGravityPower);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityComponent::StaticClass(), "GetCurrentPlanet",(Native)&UCustomGravityComponent::execGetCurrentPlanet);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityComponent::StaticClass(), "GetUpdatedComponent",(Native)&UCustomGravityComponent::execGetUpdatedComponent);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityComponent::StaticClass(), "SetCurrentPlanet",(Native)&UCustomGravityComponent::execSetCurrentPlanet);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityComponent::StaticClass(), "SetGravityScale",(Native)&UCustomGravityComponent::execSetGravityScale);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityComponent::StaticClass(), "SetGravityType",(Native)&UCustomGravityComponent::execSetGravityType);
		FNativeFunctionRegistrar::RegisterFunction(UCustomGravityComponent::StaticClass(), "SetUpdatedComponent",(Native)&UCustomGravityComponent::execSetUpdatedComponent);
	}
	IMPLEMENT_CLASS(UCustomGravityComponent, 2619566204);
static class UEnum* ETraceShape_StaticEnum()
{
	extern CUSTOMGRAVITYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_ETraceShape();
		Singleton = GetStaticEnum(Z_Construct_UEnum_CustomGravityPlugin_ETraceShape, Z_Construct_UPackage__Script_CustomGravityPlugin(), TEXT("ETraceShape"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ETraceShape(ETraceShape_StaticEnum, TEXT("/Script/CustomGravityPlugin"), TEXT("ETraceShape"), false, nullptr, nullptr);
static class UEnum* EVerticalOrientation_StaticEnum()
{
	extern CUSTOMGRAVITYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_EVerticalOrientation();
		Singleton = GetStaticEnum(Z_Construct_UEnum_CustomGravityPlugin_EVerticalOrientation, Z_Construct_UPackage__Script_CustomGravityPlugin(), TEXT("EVerticalOrientation"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EVerticalOrientation(EVerticalOrientation_StaticEnum, TEXT("/Script/CustomGravityPlugin"), TEXT("EVerticalOrientation"), false, nullptr, nullptr);
class UScriptStruct* FOrientationSettings::StaticStruct()
{
	extern CUSTOMGRAVITYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern CUSTOMGRAVITYPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FOrientationSettings();
		extern CUSTOMGRAVITYPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FOrientationSettings_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FOrientationSettings, Z_Construct_UPackage__Script_CustomGravityPlugin(), TEXT("OrientationSettings"), sizeof(FOrientationSettings), Get_Z_Construct_UScriptStruct_FOrientationSettings_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FOrientationSettings(FOrientationSettings::StaticStruct, TEXT("/Script/CustomGravityPlugin"), TEXT("OrientationSettings"), false, nullptr, nullptr);
static struct FScriptStruct_CustomGravityPlugin_StaticRegisterNativesFOrientationSettings
{
	FScriptStruct_CustomGravityPlugin_StaticRegisterNativesFOrientationSettings()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("OrientationSettings")),new UScriptStruct::TCppStructOps<FOrientationSettings>);
	}
} ScriptStruct_CustomGravityPlugin_StaticRegisterNativesFOrientationSettings;
class UScriptStruct* FOrientationInfo::StaticStruct()
{
	extern CUSTOMGRAVITYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin();
	static class UScriptStruct* Singleton = NULL;
	if (!Singleton)
	{
		extern CUSTOMGRAVITYPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FOrientationInfo();
		extern CUSTOMGRAVITYPLUGIN_API uint32 Get_Z_Construct_UScriptStruct_FOrientationInfo_CRC();
		Singleton = GetStaticStruct(Z_Construct_UScriptStruct_FOrientationInfo, Z_Construct_UPackage__Script_CustomGravityPlugin(), TEXT("OrientationInfo"), sizeof(FOrientationInfo), Get_Z_Construct_UScriptStruct_FOrientationInfo_CRC());
	}
	return Singleton;
}
static FCompiledInDeferStruct Z_CompiledInDeferStruct_UScriptStruct_FOrientationInfo(FOrientationInfo::StaticStruct, TEXT("/Script/CustomGravityPlugin"), TEXT("OrientationInfo"), false, nullptr, nullptr);
static struct FScriptStruct_CustomGravityPlugin_StaticRegisterNativesFOrientationInfo
{
	FScriptStruct_CustomGravityPlugin_StaticRegisterNativesFOrientationInfo()
	{
		UScriptStruct::DeferCppStructOps(FName(TEXT("OrientationInfo")),new UScriptStruct::TCppStructOps<FOrientationInfo>);
	}
} ScriptStruct_CustomGravityPlugin_StaticRegisterNativesFOrientationInfo;
	void UCustomMovementComponent::StaticRegisterNativesUCustomMovementComponent()
	{
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "CapsuleHited",(Native)&UCustomMovementComponent::execCapsuleHited);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "ClearPlanet",(Native)&UCustomMovementComponent::execClearPlanet);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "GetCurrentPlanet",(Native)&UCustomMovementComponent::execGetCurrentPlanet);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "GetCurrentWalkSpeed",(Native)&UCustomMovementComponent::execGetCurrentWalkSpeed);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "GetFallingSpeed",(Native)&UCustomMovementComponent::execGetFallingSpeed);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "GetFallingVelocity",(Native)&UCustomMovementComponent::execGetFallingVelocity);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "GetGravityDirection",(Native)&UCustomMovementComponent::execGetGravityDirection);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "GetGravityPower",(Native)&UCustomMovementComponent::execGetGravityPower);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "GetInAirTime",(Native)&UCustomMovementComponent::execGetInAirTime);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "GetMovementVelocity",(Native)&UCustomMovementComponent::execGetMovementVelocity);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "IsSprinting",(Native)&UCustomMovementComponent::execIsSprinting);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "RequestGavityImmediateUpdate",(Native)&UCustomMovementComponent::execRequestGavityImmediateUpdate);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "SetComponentOwner",(Native)&UCustomMovementComponent::execSetComponentOwner);
		FNativeFunctionRegistrar::RegisterFunction(UCustomMovementComponent::StaticClass(), "SetCurrentPlanet",(Native)&UCustomMovementComponent::execSetCurrentPlanet);
	}
	IMPLEMENT_CLASS(UCustomMovementComponent, 1574534937);
	void ACustomPawn::StaticRegisterNativesACustomPawn()
	{
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "AddCameraPitchInput",(Native)&ACustomPawn::execAddCameraPitchInput);
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "AddCameraYawInput",(Native)&ACustomPawn::execAddCameraYawInput);
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "AddForwardMovementInput",(Native)&ACustomPawn::execAddForwardMovementInput);
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "AddRightMovementInput",(Native)&ACustomPawn::execAddRightMovementInput);
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "DisableDebugging",(Native)&ACustomPawn::execDisableDebugging);
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "EnableDebugging",(Native)&ACustomPawn::execEnableDebugging);
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "GetCurrentForwardDirection",(Native)&ACustomPawn::execGetCurrentForwardDirection);
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "GetCurrentRightDirection",(Native)&ACustomPawn::execGetCurrentRightDirection);
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "Jump",(Native)&ACustomPawn::execJump);
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "Sprint",(Native)&ACustomPawn::execSprint);
		FNativeFunctionRegistrar::RegisterFunction(ACustomPawn::StaticClass(), "StopSprint",(Native)&ACustomPawn::execStopSprint);
	}
	IMPLEMENT_CLASS(ACustomPawn, 2600363227);
	void AFirstPersonCharacter::StaticRegisterNativesAFirstPersonCharacter()
	{
	}
	IMPLEMENT_CLASS(AFirstPersonCharacter, 835604626);
	void AThirdPersonBall::StaticRegisterNativesAThirdPersonBall()
	{
	}
	IMPLEMENT_CLASS(AThirdPersonBall, 4032884510);
static class UEnum* EMeshOrientation_StaticEnum()
{
	extern CUSTOMGRAVITYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_EMeshOrientation();
		Singleton = GetStaticEnum(Z_Construct_UEnum_CustomGravityPlugin_EMeshOrientation, Z_Construct_UPackage__Script_CustomGravityPlugin(), TEXT("EMeshOrientation"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_EMeshOrientation(EMeshOrientation_StaticEnum, TEXT("/Script/CustomGravityPlugin"), TEXT("EMeshOrientation"), false, nullptr, nullptr);
	void AThirdPersonCharacter::StaticRegisterNativesAThirdPersonCharacter()
	{
	}
	IMPLEMENT_CLASS(AThirdPersonCharacter, 145583729);
	void ACustomPhysicsActor::StaticRegisterNativesACustomPhysicsActor()
	{
	}
	IMPLEMENT_CLASS(ACustomPhysicsActor, 1181772428);
	void APhysicsBallPawn::StaticRegisterNativesAPhysicsBallPawn()
	{
		FNativeFunctionRegistrar::RegisterFunction(APhysicsBallPawn::StaticClass(), "AddCameraPitchInput",(Native)&APhysicsBallPawn::execAddCameraPitchInput);
		FNativeFunctionRegistrar::RegisterFunction(APhysicsBallPawn::StaticClass(), "AddCameraYawInput",(Native)&APhysicsBallPawn::execAddCameraYawInput);
		FNativeFunctionRegistrar::RegisterFunction(APhysicsBallPawn::StaticClass(), "AddForwardTorque",(Native)&APhysicsBallPawn::execAddForwardTorque);
		FNativeFunctionRegistrar::RegisterFunction(APhysicsBallPawn::StaticClass(), "AddRightTorque",(Native)&APhysicsBallPawn::execAddRightTorque);
		FNativeFunctionRegistrar::RegisterFunction(APhysicsBallPawn::StaticClass(), "Jump",(Native)&APhysicsBallPawn::execJump);
	}
	IMPLEMENT_CLASS(APhysicsBallPawn, 2850237177);
static class UEnum* ECollisionType_StaticEnum()
{
	extern CUSTOMGRAVITYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin();
	static class UEnum* Singleton = NULL;
	if (!Singleton)
	{
		extern CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_ECollisionType();
		Singleton = GetStaticEnum(Z_Construct_UEnum_CustomGravityPlugin_ECollisionType, Z_Construct_UPackage__Script_CustomGravityPlugin(), TEXT("ECollisionType"));
	}
	return Singleton;
}
static FCompiledInDeferEnum Z_CompiledInDeferEnum_UEnum_ECollisionType(ECollisionType_StaticEnum, TEXT("/Script/CustomGravityPlugin"), TEXT("ECollisionType"), false, nullptr, nullptr);
	void APlanetActor::StaticRegisterNativesAPlanetActor()
	{
		FNativeFunctionRegistrar::RegisterFunction(APlanetActor::StaticClass(), "GetGravityDirection",(Native)&APlanetActor::execGetGravityDirection);
		FNativeFunctionRegistrar::RegisterFunction(APlanetActor::StaticClass(), "GetGravityinfo",(Native)&APlanetActor::execGetGravityinfo);
		FNativeFunctionRegistrar::RegisterFunction(APlanetActor::StaticClass(), "SetForceMode",(Native)&APlanetActor::execSetForceMode);
		FNativeFunctionRegistrar::RegisterFunction(APlanetActor::StaticClass(), "SetGravityPower",(Native)&APlanetActor::execSetGravityPower);
	}
	IMPLEMENT_CLASS(APlanetActor, 3886030077);
#if USE_COMPILED_IN_NATIVES
// Cross Module References
	COREUOBJECT_API class UScriptStruct* Z_Construct_UScriptStruct_FVector();
	ENGINE_API class UClass* Z_Construct_UClass_UBlueprintFunctionLibrary();
	ENGINE_API class UClass* Z_Construct_UClass_UPrimitiveComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UActorComponent();
	ENGINE_API class UScriptStruct* Z_Construct_UScriptStruct_FHitResult();
	ENGINE_API class UClass* Z_Construct_UClass_AActor_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UFloatingPawnMovement();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_ECollisionChannel();
	ENGINE_API class UEnum* Z_Construct_UEnum_Engine_EDrawDebugTrace();
	ENGINE_API class UClass* Z_Construct_UClass_APawn();
	ENGINE_API class UClass* Z_Construct_UClass_UArrowComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USceneComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USkeletalMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCameraComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_USpringArmComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UCapsuleComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMeshComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_AActor();
	ENGINE_API class UClass* Z_Construct_UClass_USphereComponent_NoRegister();
	ENGINE_API class UClass* Z_Construct_UClass_UStaticMesh_NoRegister();

	CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_EForceMode();
	CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_EGravityType();
	CUSTOMGRAVITYPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FGravityInfo();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_Conv_ForceModeToString();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_Conv_GravityInfoToString();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_Conv_GravityTypeToString();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityDirection();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityForceMode();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityInfo();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityPower();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityDirection();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityForceMode();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityInfo();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityPower();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_UCustomGravityManager_NoRegister();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_UCustomGravityManager();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityComponent_ClearCurrentPlanet();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityDirection();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityInfo();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityPower();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityComponent_GetCurrentPlanet();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityComponent_GetUpdatedComponent();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityComponent_SetCurrentPlanet();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityComponent_SetGravityScale();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityComponent_SetGravityType();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomGravityComponent_SetUpdatedComponent();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_UCustomGravityComponent_NoRegister();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_UCustomGravityComponent();
	CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_ETraceShape();
	CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_EVerticalOrientation();
	CUSTOMGRAVITYPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FOrientationSettings();
	CUSTOMGRAVITYPLUGIN_API class UScriptStruct* Z_Construct_UScriptStruct_FOrientationInfo();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_CapsuleHited();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_ClearPlanet();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetCurrentPlanet();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetCurrentWalkSpeed();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetFallingSpeed();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetFallingVelocity();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetGravityDirection();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetGravityPower();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetInAirTime();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetMovementVelocity();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_IsSprinting();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_RequestGavityImmediateUpdate();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_SetComponentOwner();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_UCustomMovementComponent_SetCurrentPlanet();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_UCustomMovementComponent_NoRegister();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_UCustomMovementComponent();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_AddCameraPitchInput();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_AddCameraYawInput();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_AddForwardMovementInput();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_AddRightMovementInput();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_DisableDebugging();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_EnableDebugging();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_GetCurrentForwardDirection();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_GetCurrentRightDirection();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_Jump();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_Sprint();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_ACustomPawn_StopSprint();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_ACustomPawn_NoRegister();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_ACustomPawn();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_AFirstPersonCharacter_NoRegister();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_AFirstPersonCharacter();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_AThirdPersonBall_NoRegister();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_AThirdPersonBall();
	CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_EMeshOrientation();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_AThirdPersonCharacter_NoRegister();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_AThirdPersonCharacter();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_ACustomPhysicsActor_NoRegister();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_ACustomPhysicsActor();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_APhysicsBallPawn_AddCameraPitchInput();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_APhysicsBallPawn_AddCameraYawInput();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_APhysicsBallPawn_AddForwardTorque();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_APhysicsBallPawn_AddRightTorque();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_APhysicsBallPawn_Jump();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_APhysicsBallPawn_NoRegister();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_APhysicsBallPawn();
	CUSTOMGRAVITYPLUGIN_API class UEnum* Z_Construct_UEnum_CustomGravityPlugin_ECollisionType();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_APlanetActor_GetGravityDirection();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_APlanetActor_GetGravityinfo();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_APlanetActor_SetForceMode();
	CUSTOMGRAVITYPLUGIN_API class UFunction* Z_Construct_UFunction_APlanetActor_SetGravityPower();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_APlanetActor_NoRegister();
	CUSTOMGRAVITYPLUGIN_API class UClass* Z_Construct_UClass_APlanetActor();
	CUSTOMGRAVITYPLUGIN_API class UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin();
	UEnum* Z_Construct_UEnum_CustomGravityPlugin_EForceMode()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_CustomGravityPlugin();
		extern uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_EForceMode_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EForceMode"), 0, Get_Z_Construct_UEnum_CustomGravityPlugin_EForceMode_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EForceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EForceMode::EFM_Acceleration")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EForceMode::EFM_Force")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EForceMode::EFM_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EForceMode::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("EFM_Acceleration.DisplayName"), TEXT("Acceleration"));
			MetaData->SetValue(ReturnEnum, TEXT("EFM_Force.DisplayName"), TEXT("Force"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Type of force applied to a body using Custom Gravity."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_EForceMode_CRC() { return 4231611349U; }
	UEnum* Z_Construct_UEnum_CustomGravityPlugin_EGravityType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_CustomGravityPlugin();
		extern uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_EGravityType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EGravityType"), 0, Get_Z_Construct_UEnum_CustomGravityPlugin_EGravityType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EGravityType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGravityType::EGT_Default")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGravityType::EGT_Point")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGravityType::EGT_Custom")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGravityType::EGT_GlobalCustom")), 3));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EGravityType::EGT_MAX")), 4));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EGravityType::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("EGT_Custom.DisplayName"), TEXT("Custom Gravity"));
			MetaData->SetValue(ReturnEnum, TEXT("EGT_Default.DisplayName"), TEXT("Default Gravity"));
			MetaData->SetValue(ReturnEnum, TEXT("EGT_GlobalCustom.DisplayName"), TEXT("Global Custom Gravity"));
			MetaData->SetValue(ReturnEnum, TEXT("EGT_Point.DisplayName"), TEXT("Point Gravity"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnEnum, TEXT("ToolTip"), TEXT("Enumerates available custom gravity types."));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_EGravityType_CRC() { return 1973073635U; }
	UScriptStruct* Z_Construct_UScriptStruct_FGravityInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_CustomGravityPlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FGravityInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("GravityInfo"), sizeof(FGravityInfo), Get_Z_Construct_UScriptStruct_FGravityInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GravityInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FGravityInfo>, EStructFlags(0x00000201));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForceSubStepping, FGravityInfo, bool);
			UProperty* NewProp_bForceSubStepping = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bForceSubStepping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForceSubStepping, FGravityInfo), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bForceSubStepping, FGravityInfo), sizeof(bool), true);
			UProperty* NewProp_ForceMode = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("ForceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ForceMode, FGravityInfo), 0x0010000000000005, Z_Construct_UEnum_CustomGravityPlugin_EForceMode());
			UProperty* NewProp_GravityDirection = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GravityDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(GravityDirection, FGravityInfo), 0x0010000000000005, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_GravityPower = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GravityPower"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GravityPower, FGravityInfo), 0x0010000000000005);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnStruct, TEXT("ToolTip"), TEXT("Struct to hold information about the \"Gravity Type\" ."));
			MetaData->SetValue(NewProp_bForceSubStepping, TEXT("Category"), TEXT("GravityInfo"));
			MetaData->SetValue(NewProp_bForceSubStepping, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(NewProp_ForceMode, TEXT("Category"), TEXT("GravityInfo"));
			MetaData->SetValue(NewProp_ForceMode, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(NewProp_GravityDirection, TEXT("Category"), TEXT("GravityInfo"));
			MetaData->SetValue(NewProp_GravityDirection, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(NewProp_GravityPower, TEXT("Category"), TEXT("GravityInfo"));
			MetaData->SetValue(NewProp_GravityPower, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FGravityInfo_CRC() { return 352827827U; }
	UFunction* Z_Construct_UFunction_UCustomGravityManager_Conv_ForceModeToString()
	{
		struct CustomGravityManager_eventConv_ForceModeToString_Parms
		{
			TEnumAsByte<EForceMode::Type> InForceMode;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_ForceModeToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(CustomGravityManager_eventConv_ForceModeToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityManager_eventConv_ForceModeToString_Parms), 0x0010000000000580);
			UProperty* NewProp_InForceMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InForceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InForceMode, CustomGravityManager_eventConv_ForceModeToString_Parms), 0x0010000000000080, Z_Construct_UEnum_CustomGravityPlugin_EForceMode());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (ForceMode)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a ForceMode enum value to a string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityManager_Conv_GravityInfoToString()
	{
		struct CustomGravityManager_eventConv_GravityInfoToString_Parms
		{
			FGravityInfo InGravityInfo;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_GravityInfoToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(CustomGravityManager_eventConv_GravityInfoToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityManager_eventConv_GravityInfoToString_Parms), 0x0010000000000580);
			UProperty* NewProp_InGravityInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InGravityInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(InGravityInfo, CustomGravityManager_eventConv_GravityInfoToString_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FGravityInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (GravityInfo)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a GravityInfo struct value to a string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityManager_Conv_GravityTypeToString()
	{
		struct CustomGravityManager_eventConv_GravityTypeToString_Parms
		{
			TEnumAsByte<EGravityType::Type> InGravityType;
			FString ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Conv_GravityTypeToString"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(CustomGravityManager_eventConv_GravityTypeToString_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStrProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityManager_eventConv_GravityTypeToString_Parms), 0x0010000000000580);
			UProperty* NewProp_InGravityType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("InGravityType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(InGravityType, CustomGravityManager_eventConv_GravityTypeToString_Parms), 0x0010000000000080, Z_Construct_UEnum_CustomGravityPlugin_EGravityType());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("BlueprintAutocast"), TEXT(""));
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Utilities|String"));
			MetaData->SetValue(ReturnFunction, TEXT("CompactNodeTitle"), TEXT("->"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("ToString (GravityType)"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Converts a GravityType enum value to a string"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityDirection()
	{
		struct CustomGravityManager_eventGetGlobalCustomGravityDirection_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGlobalCustomGravityDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14822401, 65535, sizeof(CustomGravityManager_eventGetGlobalCustomGravityDirection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityManager_eventGetGlobalCustomGravityDirection_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Global Custom Gravity"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Global Custom Gravity Direction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("returns Global Custom Gravity direction"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityForceMode()
	{
		struct CustomGravityManager_eventGetGlobalCustomGravityForceMode_Parms
		{
			TEnumAsByte<EForceMode::Type> ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGlobalCustomGravityForceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(CustomGravityManager_eventGetGlobalCustomGravityForceMode_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityManager_eventGetGlobalCustomGravityForceMode_Parms), 0x0010000000000580, Z_Construct_UEnum_CustomGravityPlugin_EForceMode());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Global Custom Gravity"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Global Custom Gravity ForceMode"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("returns Global Custom Gravity force mode"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityInfo()
	{
		struct CustomGravityManager_eventGetGlobalCustomGravityInfo_Parms
		{
			FGravityInfo ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGlobalCustomGravityInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(CustomGravityManager_eventGetGlobalCustomGravityInfo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityManager_eventGetGlobalCustomGravityInfo_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FGravityInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Global Custom Gravity"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Global Custom Gravity Info"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("returns Global Custom Gravity information"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityPower()
	{
		struct CustomGravityManager_eventGetGlobalCustomGravityPower_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGlobalCustomGravityPower"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x14022401, 65535, sizeof(CustomGravityManager_eventGetGlobalCustomGravityPower_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityManager_eventGetGlobalCustomGravityPower_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Global Custom Gravity"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Global Custom Gravity Power"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("returns Global Custom Gravity power"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityDirection()
	{
		struct CustomGravityManager_eventSetGlobalCustomGravityDirection_Parms
		{
			FVector NewGravityDirection;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGlobalCustomGravityDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04C22401, 65535, sizeof(CustomGravityManager_eventSetGlobalCustomGravityDirection_Parms));
			UProperty* NewProp_NewGravityDirection = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewGravityDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NewGravityDirection, CustomGravityManager_eventSetGlobalCustomGravityDirection_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Global Custom Gravity"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Global Custom Gravity Direction"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change Global Custom Gravity direction.\nThis change will affect all physics object using a CustomGravityComponent with GravityType set to \"Global Custom Gravity\"."));
			MetaData->SetValue(NewProp_NewGravityDirection, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityForceMode()
	{
		struct CustomGravityManager_eventSetGlobalCustomGravityForceMode_Parms
		{
			TEnumAsByte<EForceMode::Type> NewForceMode;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGlobalCustomGravityForceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(CustomGravityManager_eventSetGlobalCustomGravityForceMode_Parms));
			UProperty* NewProp_NewForceMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewForceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NewForceMode, CustomGravityManager_eventSetGlobalCustomGravityForceMode_Parms), 0x0010000000000080, Z_Construct_UEnum_CustomGravityPlugin_EForceMode());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Global Custom Gravity"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Global Custom Gravity Force Mode"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change Global Custom Gravity force mode.\n     * This change will affect all physics object using a CustomGravityComponent with GravityType set to \"Global Custom Gravity\"."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityInfo()
	{
		struct CustomGravityManager_eventSetGlobalCustomGravityInfo_Parms
		{
			FGravityInfo NewGravityInfo;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGlobalCustomGravityInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04422401, 65535, sizeof(CustomGravityManager_eventSetGlobalCustomGravityInfo_Parms));
			UProperty* NewProp_NewGravityInfo = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewGravityInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NewGravityInfo, CustomGravityManager_eventSetGlobalCustomGravityInfo_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FGravityInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Global Custom Gravity"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Global Custom Gravity Info"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change Global Custom Gravity information.\nThis change will affect all physics object using a CustomGravityComponent with GravityType set to \"Global Custom Gravity\"."));
			MetaData->SetValue(NewProp_NewGravityInfo, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityPower()
	{
		struct CustomGravityManager_eventSetGlobalCustomGravityPower_Parms
		{
			float NewGravityPower;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityManager();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGlobalCustomGravityPower"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04022401, 65535, sizeof(CustomGravityManager_eventSetGlobalCustomGravityPower_Parms));
			UProperty* NewProp_NewGravityPower = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewGravityPower"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewGravityPower, CustomGravityManager_eventSetGlobalCustomGravityPower_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Global Custom Gravity"));
			MetaData->SetValue(ReturnFunction, TEXT("DisplayName"), TEXT("Set Global Custom Gravity Power"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change Global Custom Gravity power.\nThis change will affect all physics object using a CustomGravityComponent with GravityType set to \"Global Custom Gravity\"."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCustomGravityManager_NoRegister()
	{
		return UCustomGravityManager::StaticClass();
	}
	UClass* Z_Construct_UClass_UCustomGravityManager()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UBlueprintFunctionLibrary();
			Z_Construct_UPackage__Script_CustomGravityPlugin();
			OuterClass = UCustomGravityManager::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20100080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_Conv_ForceModeToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_Conv_GravityInfoToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_Conv_GravityTypeToString());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityForceMode());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityInfo());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityPower());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityForceMode());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityInfo());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityPower());

				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_Conv_ForceModeToString(), "Conv_ForceModeToString"); // 3947413705
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_Conv_GravityInfoToString(), "Conv_GravityInfoToString"); // 318449452
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_Conv_GravityTypeToString(), "Conv_GravityTypeToString"); // 2938229564
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityDirection(), "GetGlobalCustomGravityDirection"); // 4101289492
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityForceMode(), "GetGlobalCustomGravityForceMode"); // 3259329068
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityInfo(), "GetGlobalCustomGravityInfo"); // 1859617078
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_GetGlobalCustomGravityPower(), "GetGlobalCustomGravityPower"); // 717679037
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityDirection(), "SetGlobalCustomGravityDirection"); // 4280127297
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityForceMode(), "SetGlobalCustomGravityForceMode"); // 3280899413
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityInfo(), "SetGlobalCustomGravityInfo"); // 2320954651
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityManager_SetGlobalCustomGravityPower(), "SetGlobalCustomGravityPower"); // 2360722036
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Objects/CustomGravityManager.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Objects/CustomGravityManager.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCustomGravityManager(Z_Construct_UClass_UCustomGravityManager, &UCustomGravityManager::StaticClass, TEXT("UCustomGravityManager"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCustomGravityManager);
	UFunction* Z_Construct_UFunction_UCustomGravityComponent_ClearCurrentPlanet()
	{
		UObject* Outer=Z_Construct_UClass_UCustomGravityComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearCurrentPlanet"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics|Components|CustomGravity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Current Planet Reference to null"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityDirection()
	{
		struct CustomGravityComponent_eventGetCurrentGravityDirection_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentGravityDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CustomGravityComponent_eventGetCurrentGravityDirection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityComponent_eventGetCurrentGravityDirection_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics|Components|CustomGravity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return current component gravity direction."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityInfo()
	{
		struct CustomGravityComponent_eventGetCurrentGravityInfo_Parms
		{
			FGravityInfo ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentGravityInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CustomGravityComponent_eventGetCurrentGravityInfo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityComponent_eventGetCurrentGravityInfo_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FGravityInfo());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics|Components|CustomGravity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return current component gravity information."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityPower()
	{
		struct CustomGravityComponent_eventGetCurrentGravityPower_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentGravityPower"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CustomGravityComponent_eventGetCurrentGravityPower_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityComponent_eventGetCurrentGravityPower_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics|Components|CustomGravity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return current component gravity power."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityComponent_GetCurrentPlanet()
	{
		struct CustomGravityComponent_eventGetCurrentPlanet_Parms
		{
			APlanetActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentPlanet"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CustomGravityComponent_eventGetCurrentPlanet_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityComponent_eventGetCurrentPlanet_Parms), 0x0010000000000580, Z_Construct_UClass_APlanetActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics|Components|CustomGravity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return APlanetActor reference."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityComponent_GetUpdatedComponent()
	{
		struct CustomGravityComponent_eventGetUpdatedComponent_Parms
		{
			UPrimitiveComponent* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetUpdatedComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CustomGravityComponent_eventGetUpdatedComponent_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, CustomGravityComponent_eventGetUpdatedComponent_Parms), 0x0010000000080588, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics|Components|CustomGravity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Return PrimitiveComponent we are Updating."));
			MetaData->SetValue(NewProp_ReturnValue, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityComponent_SetCurrentPlanet()
	{
		struct CustomGravityComponent_eventSetCurrentPlanet_Parms
		{
			APlanetActor* NewPlanet;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCurrentPlanet"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CustomGravityComponent_eventSetCurrentPlanet_Parms));
			UProperty* NewProp_NewPlanet = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewPlanet"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewPlanet, CustomGravityComponent_eventSetCurrentPlanet_Parms), 0x0010000000000080, Z_Construct_UClass_APlanetActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics|Components|CustomGravity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Update Current Planet Reference"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityComponent_SetGravityScale()
	{
		struct CustomGravityComponent_eventSetGravityScale_Parms
		{
			float NewGravityScale;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGravityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CustomGravityComponent_eventSetGravityScale_Parms));
			UProperty* NewProp_NewGravityScale = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewGravityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewGravityScale, CustomGravityComponent_eventSetGravityScale_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics|Components|CustomGravity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change Gravity Scale"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityComponent_SetGravityType()
	{
		struct CustomGravityComponent_eventSetGravityType_Parms
		{
			TEnumAsByte<EGravityType::Type> NewGravityType;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGravityType"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CustomGravityComponent_eventSetGravityType_Parms));
			UProperty* NewProp_NewGravityType = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewGravityType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(NewGravityType, CustomGravityComponent_eventSetGravityType_Parms), 0x0010000000000080, Z_Construct_UEnum_CustomGravityPlugin_EGravityType());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics|Components|CustomGravity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change GravityType"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomGravityComponent_SetUpdatedComponent()
	{
		struct CustomGravityComponent_eventSetUpdatedComponent_Parms
		{
			UPrimitiveComponent* NewUpdatedComponent;
		};
		UObject* Outer=Z_Construct_UClass_UCustomGravityComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetUpdatedComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CustomGravityComponent_eventSetUpdatedComponent_Parms));
			UProperty* NewProp_NewUpdatedComponent = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewUpdatedComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewUpdatedComponent, CustomGravityComponent_eventSetUpdatedComponent_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Physics|Components|CustomGravity"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Update the Component updated by this component"));
			MetaData->SetValue(NewProp_NewUpdatedComponent, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCustomGravityComponent_NoRegister()
	{
		return UCustomGravityComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UCustomGravityComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UActorComponent();
			Z_Construct_UPackage__Script_CustomGravityPlugin();
			OuterClass = UCustomGravityComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00080;

				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityComponent_ClearCurrentPlanet());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityInfo());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityPower());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityComponent_GetCurrentPlanet());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityComponent_GetUpdatedComponent());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityComponent_SetCurrentPlanet());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityComponent_SetGravityScale());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityComponent_SetGravityType());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomGravityComponent_SetUpdatedComponent());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_PlanetActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlanetActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PlanetActor, UCustomGravityComponent), 0x0020080000000015, Z_Construct_UClass_APlanetActor_NoRegister());
				UProperty* NewProp_GravityType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GravityType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(GravityType, UCustomGravityComponent), 0x0020080000000015, Z_Construct_UEnum_CustomGravityPlugin_EGravityType());
				UProperty* NewProp_CustomGravityInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomGravityInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CustomGravityInfo, UCustomGravityComponent), 0x0020080000000005, Z_Construct_UScriptStruct_FGravityInfo());
				UProperty* NewProp_GravityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GravityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GravityScale, UCustomGravityComponent), 0x0020080000000015);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityComponent_ClearCurrentPlanet(), "ClearCurrentPlanet"); // 660262904
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityDirection(), "GetCurrentGravityDirection"); // 2179989365
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityInfo(), "GetCurrentGravityInfo"); // 233313650
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityComponent_GetCurrentGravityPower(), "GetCurrentGravityPower"); // 2189405375
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityComponent_GetCurrentPlanet(), "GetCurrentPlanet"); // 3533760878
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityComponent_GetUpdatedComponent(), "GetUpdatedComponent"); // 2729133624
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityComponent_SetCurrentPlanet(), "SetCurrentPlanet"); // 2122944846
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityComponent_SetGravityScale(), "SetGravityScale"); // 2340006678
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityComponent_SetGravityType(), "SetGravityType"); // 1415148244
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomGravityComponent_SetUpdatedComponent(), "SetUpdatedComponent"); // 2636578599
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("BlueprintSpawnableComponent"), TEXT(""));
				MetaData->SetValue(OuterClass, TEXT("ClassGroupNames"), TEXT("Custom"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/CustomGravityComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
				MetaData->SetValue(NewProp_PlanetActor, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_PlanetActor, TEXT("Category"), TEXT("Custom Gravity Component (General Settings)"));
				MetaData->SetValue(NewProp_PlanetActor, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
				MetaData->SetValue(NewProp_PlanetActor, TEXT("ToolTip"), TEXT("Planet Actor Reference ."));
				MetaData->SetValue(NewProp_GravityType, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_GravityType, TEXT("Category"), TEXT("Custom Gravity Component (General Settings)"));
				MetaData->SetValue(NewProp_GravityType, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
				MetaData->SetValue(NewProp_GravityType, TEXT("ToolTip"), TEXT("Gravity Type.\nDefault Gravity.\nPoint Gravity.\nCustom Gravity.\nGlobal Custom Gravity."));
				MetaData->SetValue(NewProp_CustomGravityInfo, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_CustomGravityInfo, TEXT("Category"), TEXT("Custom Gravity Component (General Settings)"));
				MetaData->SetValue(NewProp_CustomGravityInfo, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
				MetaData->SetValue(NewProp_CustomGravityInfo, TEXT("ToolTip"), TEXT("Custom gravity Information.\nGravity Power.\nGravity Direction.\nForce Mode.\nForeSubstepping."));
				MetaData->SetValue(NewProp_GravityScale, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_GravityScale, TEXT("Category"), TEXT("Custom Gravity Component (General Settings)"));
				MetaData->SetValue(NewProp_GravityScale, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomGravityComponent.h"));
				MetaData->SetValue(NewProp_GravityScale, TEXT("ToolTip"), TEXT("Custom gravity scale. Gravity is multiplied by this amount for the component owner."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCustomGravityComponent(Z_Construct_UClass_UCustomGravityComponent, &UCustomGravityComponent::StaticClass, TEXT("UCustomGravityComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCustomGravityComponent);
	UEnum* Z_Construct_UEnum_CustomGravityPlugin_ETraceShape()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_CustomGravityPlugin();
		extern uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_ETraceShape_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ETraceShape"), 0, Get_Z_Construct_UEnum_CustomGravityPlugin_ETraceShape_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ETraceShape"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETraceShape::ETS_Sphere")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETraceShape::ETS_Box")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETraceShape::ETS_Line")), 2));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ETraceShape::ETS_MAX")), 3));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("ETraceShape::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ETS_Box.DisplayName"), TEXT("Box"));
			MetaData->SetValue(ReturnEnum, TEXT("ETS_Line.DisplayName"), TEXT("Line"));
			MetaData->SetValue(ReturnEnum, TEXT("ETS_Sphere.DisplayName"), TEXT("Sphere"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_ETraceShape_CRC() { return 3391708798U; }
	UEnum* Z_Construct_UEnum_CustomGravityPlugin_EVerticalOrientation()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_CustomGravityPlugin();
		extern uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_EVerticalOrientation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EVerticalOrientation"), 0, Get_Z_Construct_UEnum_CustomGravityPlugin_EVerticalOrientation_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EVerticalOrientation"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVerticalOrientation::EVO_GravityDirection")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVerticalOrientation::EVO_SurfaceNormal")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EVerticalOrientation::EVO_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EVerticalOrientation::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("EVO_GravityDirection.DisplayName"), TEXT("Gravity Direction"));
			MetaData->SetValue(ReturnEnum, TEXT("EVO_SurfaceNormal.DisplayName"), TEXT("Surface Normal"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_EVerticalOrientation_CRC() { return 4271832473U; }
	UScriptStruct* Z_Construct_UScriptStruct_FOrientationSettings()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_CustomGravityPlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FOrientationSettings_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("OrientationSettings"), sizeof(FOrientationSettings), Get_Z_Construct_UScriptStruct_FOrientationSettings_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OrientationSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FOrientationSettings>, EStructFlags(0x00000001));
			UProperty* NewProp_SurfaceBasedGravity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("SurfaceBasedGravity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SurfaceBasedGravity, FOrientationSettings), 0x0010000000000005, Z_Construct_UScriptStruct_FOrientationInfo());
			UProperty* NewProp_GlobalCustomGravity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("GlobalCustomGravity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(GlobalCustomGravity, FOrientationSettings), 0x0010000000000005, Z_Construct_UScriptStruct_FOrientationInfo());
			UProperty* NewProp_CustomGravity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("CustomGravity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CustomGravity, FOrientationSettings), 0x0010000000000005, Z_Construct_UScriptStruct_FOrientationInfo());
			UProperty* NewProp_PointGravity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("PointGravity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PointGravity, FOrientationSettings), 0x0010000000000005, Z_Construct_UScriptStruct_FOrientationInfo());
			UProperty* NewProp_DefaultGravity = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("DefaultGravity"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(DefaultGravity, FOrientationSettings), 0x0010000000000005, Z_Construct_UScriptStruct_FOrientationInfo());
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(NewProp_SurfaceBasedGravity, TEXT("Category"), TEXT("OrientationSettings"));
			MetaData->SetValue(NewProp_SurfaceBasedGravity, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(NewProp_GlobalCustomGravity, TEXT("Category"), TEXT("OrientationSettings"));
			MetaData->SetValue(NewProp_GlobalCustomGravity, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(NewProp_CustomGravity, TEXT("Category"), TEXT("OrientationSettings"));
			MetaData->SetValue(NewProp_CustomGravity, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(NewProp_PointGravity, TEXT("Category"), TEXT("OrientationSettings"));
			MetaData->SetValue(NewProp_PointGravity, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(NewProp_DefaultGravity, TEXT("Category"), TEXT("OrientationSettings"));
			MetaData->SetValue(NewProp_DefaultGravity, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FOrientationSettings_CRC() { return 1325043465U; }
	UScriptStruct* Z_Construct_UScriptStruct_FOrientationInfo()
	{
		UPackage* Outer = Z_Construct_UPackage__Script_CustomGravityPlugin();
		extern uint32 Get_Z_Construct_UScriptStruct_FOrientationInfo_CRC();
		static UScriptStruct* ReturnStruct = FindExistingStructIfHotReloadOrDynamic(Outer, TEXT("OrientationInfo"), sizeof(FOrientationInfo), Get_Z_Construct_UScriptStruct_FOrientationInfo_CRC(), false);
		if (!ReturnStruct)
		{
			ReturnStruct = new(EC_InternalUseOnlyConstructor, Outer, TEXT("OrientationInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UScriptStruct(FObjectInitializer(), NULL, new UScriptStruct::TCppStructOps<FOrientationInfo>, EStructFlags(0x00000001));
			UProperty* NewProp_RotationInterpSpeed = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("RotationInterpSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RotationInterpSpeed, FOrientationInfo), 0x0010000000000005);
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bIsInstant, FOrientationInfo, bool);
			UProperty* NewProp_bIsInstant = new(EC_InternalUseOnlyConstructor, ReturnStruct, TEXT("bIsInstant"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bIsInstant, FOrientationInfo), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bIsInstant, FOrientationInfo), sizeof(bool), true);
			ReturnStruct->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnStruct->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnStruct, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnStruct, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("Category"), TEXT("OrientationInfo"));
			MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(NewProp_bIsInstant, TEXT("Category"), TEXT("OrientationInfo"));
			MetaData->SetValue(NewProp_bIsInstant, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
#endif
		}
		return ReturnStruct;
	}
	uint32 Get_Z_Construct_UScriptStruct_FOrientationInfo_CRC() { return 3346311377U; }
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_CapsuleHited()
	{
		struct CustomMovementComponent_eventCapsuleHited_Parms
		{
			UPrimitiveComponent* MyComp;
			AActor* Other;
			UPrimitiveComponent* OtherComp;
			bool bSelfMoved;
			FVector HitLocation;
			FVector HitNormal;
			FVector NormalImpulse;
			FHitResult Hit;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("CapsuleHited"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x00C20400, 65535, sizeof(CustomMovementComponent_eventCapsuleHited_Parms));
			UProperty* NewProp_Hit = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Hit"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(Hit, CustomMovementComponent_eventCapsuleHited_Parms), 0x0010008008000182, Z_Construct_UScriptStruct_FHitResult());
			UProperty* NewProp_NormalImpulse = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NormalImpulse"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(NormalImpulse, CustomMovementComponent_eventCapsuleHited_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_HitNormal = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitNormal"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(HitNormal, CustomMovementComponent_eventCapsuleHited_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_HitLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("HitLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(HitLocation, CustomMovementComponent_eventCapsuleHited_Parms), 0x0010000000000080, Z_Construct_UScriptStruct_FVector());
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSelfMoved, CustomMovementComponent_eventCapsuleHited_Parms, bool);
			UProperty* NewProp_bSelfMoved = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bSelfMoved"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSelfMoved, CustomMovementComponent_eventCapsuleHited_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bSelfMoved, CustomMovementComponent_eventCapsuleHited_Parms), sizeof(bool), true);
			UProperty* NewProp_OtherComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("OtherComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(OtherComp, CustomMovementComponent_eventCapsuleHited_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			UProperty* NewProp_Other = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Other"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Other, CustomMovementComponent_eventCapsuleHited_Parms), 0x0010000000000080, Z_Construct_UClass_AActor_NoRegister());
			UProperty* NewProp_MyComp = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("MyComp"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MyComp, CustomMovementComponent_eventCapsuleHited_Parms), 0x0010000000080080, Z_Construct_UClass_UPrimitiveComponent_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called when the collision capsule touches another primitive component\nHandles physics interaction logic"));
			MetaData->SetValue(NewProp_Hit, TEXT("NativeConst"), TEXT(""));
			MetaData->SetValue(NewProp_OtherComp, TEXT("EditInline"), TEXT("true"));
			MetaData->SetValue(NewProp_MyComp, TEXT("EditInline"), TEXT("true"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_ClearPlanet()
	{
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ClearPlanet"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Set Current Planet Reference to null"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetCurrentPlanet()
	{
		struct CustomMovementComponent_eventGetCurrentPlanet_Parms
		{
			APlanetActor* ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentPlanet"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CustomMovementComponent_eventGetCurrentPlanet_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ReturnValue, CustomMovementComponent_eventGetCurrentPlanet_Parms), 0x0010000000000580, Z_Construct_UClass_APlanetActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns APlanetActor reference."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetCurrentWalkSpeed()
	{
		struct CustomMovementComponent_eventGetCurrentWalkSpeed_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentWalkSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CustomMovementComponent_eventGetCurrentWalkSpeed_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, CustomMovementComponent_eventGetCurrentWalkSpeed_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get current falling speed.\nEqual movement velocity's length"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetFallingSpeed()
	{
		struct CustomMovementComponent_eventGetFallingSpeed_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetFallingSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CustomMovementComponent_eventGetFallingSpeed_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, CustomMovementComponent_eventGetFallingSpeed_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get current falling speed.\nEqual Falling Velocity's length multiplied by direction (float)\nif direction > 0 => jumping\nif direction < 0 => falling"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetFallingVelocity()
	{
		struct CustomMovementComponent_eventGetFallingVelocity_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetFallingVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CustomMovementComponent_eventGetFallingVelocity_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CustomMovementComponent_eventGetFallingVelocity_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the falling velocity.\nCapsule component velocity  projected on -CurrentGravityDirection."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetGravityDirection()
	{
		struct CustomMovementComponent_eventGetGravityDirection_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGravityDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CustomMovementComponent_eventGetGravityDirection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CustomMovementComponent_eventGetGravityDirection_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns current applied gravity direction."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetGravityPower()
	{
		struct CustomMovementComponent_eventGetGravityPower_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGravityPower"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CustomMovementComponent_eventGetGravityPower_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, CustomMovementComponent_eventGetGravityPower_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current applied gravity power.\nEquals to Gravity Power multiplied by Gravity Scale."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetInAirTime()
	{
		struct CustomMovementComponent_eventGetInAirTime_Parms
		{
			float ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetInAirTime"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020401, 65535, sizeof(CustomMovementComponent_eventGetInAirTime_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ReturnValue, CustomMovementComponent_eventGetInAirTime_Parms), 0x0010000000000580);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get how much time the pawn is falling (in seconds)\nwhen moving on ground , it is set to 0;"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_GetMovementVelocity()
	{
		struct CustomMovementComponent_eventGetMovementVelocity_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetMovementVelocity"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CustomMovementComponent_eventGetMovementVelocity_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CustomMovementComponent_eventGetMovementVelocity_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get movement velocity.\ncustom movement component velocity  projected on horizontal plane (plane normal = Capsule up vector)."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_IsSprinting()
	{
		struct CustomMovementComponent_eventIsSprinting_Parms
		{
			bool ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("IsSprinting"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54020400, 65535, sizeof(CustomMovementComponent_eventIsSprinting_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(ReturnValue, CustomMovementComponent_eventIsSprinting_Parms, bool);
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(ReturnValue, CustomMovementComponent_eventIsSprinting_Parms), 0x0010000000000580, CPP_BOOL_PROPERTY_BITMASK(ReturnValue, CustomMovementComponent_eventIsSprinting_Parms), sizeof(bool), true);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("If Custom Pawn is sprinting or not."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_RequestGavityImmediateUpdate()
	{
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("RequestGavityImmediateUpdate"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change Immediately Gravity Info"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_SetComponentOwner()
	{
		struct CustomMovementComponent_eventSetComponentOwner_Parms
		{
			ACustomPawn* Owner;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetComponentOwner"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CustomMovementComponent_eventSetComponentOwner_Parms));
			UProperty* NewProp_Owner = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("Owner"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Owner, CustomMovementComponent_eventSetComponentOwner_Parms), 0x0010000000000080, Z_Construct_UClass_ACustomPawn_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Update the custom pawn that owns this component."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_UCustomMovementComponent_SetCurrentPlanet()
	{
		struct CustomMovementComponent_eventSetCurrentPlanet_Parms
		{
			APlanetActor* NewPlanetActor;
		};
		UObject* Outer=Z_Construct_UClass_UCustomMovementComponent();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetCurrentPlanet"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CustomMovementComponent_eventSetCurrentPlanet_Parms));
			UProperty* NewProp_NewPlanetActor = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewPlanetActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(NewPlanetActor, CustomMovementComponent_eventSetCurrentPlanet_Parms), 0x0010000000000080, Z_Construct_UClass_APlanetActor_NoRegister());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|Components|CustomMovementComponent"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Update Current Planet Reference"));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_UCustomMovementComponent_NoRegister()
	{
		return UCustomMovementComponent::StaticClass();
	}
	UClass* Z_Construct_UClass_UCustomMovementComponent()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_UFloatingPawnMovement();
			Z_Construct_UPackage__Script_CustomGravityPlugin();
			OuterClass = UCustomMovementComponent::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20B00084;

				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_CapsuleHited());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_ClearPlanet());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_GetCurrentPlanet());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_GetCurrentWalkSpeed());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_GetFallingSpeed());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_GetFallingVelocity());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_GetGravityDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_GetGravityPower());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_GetInAirTime());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_GetMovementVelocity());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_IsSprinting());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_RequestGavityImmediateUpdate());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_SetComponentOwner());
				OuterClass->LinkChild(Z_Construct_UFunction_UCustomMovementComponent_SetCurrentPlanet());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_CapsuleHitResult = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CapsuleHitResult"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CapsuleHitResult, UCustomMovementComponent), 0x0010008000020815, Z_Construct_UScriptStruct_FHitResult());
				UProperty* NewProp_CurrentTracedSurface = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentTracedSurface"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CurrentTracedSurface, UCustomMovementComponent), 0x0010008000020815, Z_Construct_UScriptStruct_FHitResult());
				UProperty* NewProp_CurrentStandingSurface = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CurrentStandingSurface"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CurrentStandingSurface, UCustomMovementComponent), 0x0010008000020815, Z_Construct_UScriptStruct_FHitResult());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bAllowDownwardForce, UCustomMovementComponent, bool);
				UProperty* NewProp_bAllowDownwardForce = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bAllowDownwardForce"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bAllowDownwardForce, UCustomMovementComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bAllowDownwardForce, UCustomMovementComponent), sizeof(bool), true);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bHitForceScaledToMass, UCustomMovementComponent, bool);
				UProperty* NewProp_bHitForceScaledToMass = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bHitForceScaledToMass"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bHitForceScaledToMass, UCustomMovementComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bHitForceScaledToMass, UCustomMovementComponent), sizeof(bool), true);
				UProperty* NewProp_HitForceFactor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("HitForceFactor"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(HitForceFactor, UCustomMovementComponent), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bEnablePhysicsInteraction, UCustomMovementComponent, bool);
				UProperty* NewProp_bEnablePhysicsInteraction = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bEnablePhysicsInteraction"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bEnablePhysicsInteraction, UCustomMovementComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bEnablePhysicsInteraction, UCustomMovementComponent), sizeof(bool), true);
				UProperty* NewProp_TraceShapeScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceShapeScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(TraceShapeScale, UCustomMovementComponent), 0x0010000000000005);
				UProperty* NewProp_TraceChannel = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceChannel"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TraceChannel, UCustomMovementComponent), 0x0010000000000005, Z_Construct_UEnum_Engine_ECollisionChannel());
				UProperty* NewProp_TraceShape = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("TraceShape"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(TraceShape, UCustomMovementComponent), 0x0010000000000005, Z_Construct_UEnum_CustomGravityPlugin_ETraceShape());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bUseCapsuleHit, UCustomMovementComponent, bool);
				UProperty* NewProp_bUseCapsuleHit = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bUseCapsuleHit"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bUseCapsuleHit, UCustomMovementComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bUseCapsuleHit, UCustomMovementComponent), sizeof(bool), true);
				UProperty* NewProp_SurfaceBasedGravityInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SurfaceBasedGravityInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(SurfaceBasedGravityInfo, UCustomMovementComponent), 0x0010000000000005, Z_Construct_UScriptStruct_FGravityInfo());
				UProperty* NewProp_PlanetActor = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlanetActor"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PlanetActor, UCustomMovementComponent), 0x0010000000000005, Z_Construct_UClass_APlanetActor_NoRegister());
				UProperty* NewProp_CustomGravityInfo = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomGravityInfo"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(CustomGravityInfo, UCustomMovementComponent), 0x0010000000000005, Z_Construct_UScriptStruct_FGravityInfo());
				UProperty* NewProp_CustomGravityType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CustomGravityType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CustomGravityType, UCustomMovementComponent), 0x0010000000000005, Z_Construct_UEnum_CustomGravityPlugin_EGravityType());
				UProperty* NewProp_DebugDrawType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("DebugDrawType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(DebugDrawType, UCustomMovementComponent), 0x0010000000000005, Z_Construct_UEnum_Engine_EDrawDebugTrace());
				UProperty* NewProp_OrientationSettings = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("OrientationSettings"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(OrientationSettings, UCustomMovementComponent), 0x0010000000000005, Z_Construct_UScriptStruct_FOrientationSettings());
				UProperty* NewProp_FallingVerticalOrientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("FallingVerticalOrientation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(FallingVerticalOrientation, UCustomMovementComponent), 0x0010000000000005, Z_Construct_UEnum_CustomGravityPlugin_EVerticalOrientation());
				UProperty* NewProp_StandingVerticalOrientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("StandingVerticalOrientation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(StandingVerticalOrientation, UCustomMovementComponent), 0x0010000000000005, Z_Construct_UEnum_CustomGravityPlugin_EVerticalOrientation());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bResetVelocityOnGravitySwitch, UCustomMovementComponent, bool);
				UProperty* NewProp_bResetVelocityOnGravitySwitch = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bResetVelocityOnGravitySwitch"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bResetVelocityOnGravitySwitch, UCustomMovementComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bResetVelocityOnGravitySwitch, UCustomMovementComponent), sizeof(bool), true);
				UProperty* NewProp_GravitySwitchDelay = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GravitySwitchDelay"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GravitySwitchDelay, UCustomMovementComponent), 0x0010000000000005);
				UProperty* NewProp_AirControlRatio = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("AirControlRatio"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(AirControlRatio, UCustomMovementComponent), 0x0010000000000005);
				UProperty* NewProp_SpeedBoostMultiplier = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpeedBoostMultiplier"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SpeedBoostMultiplier, UCustomMovementComponent), 0x0010000000000005);
				UProperty* NewProp_GroundHitToleranceDistance = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GroundHitToleranceDistance"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GroundHitToleranceDistance, UCustomMovementComponent), 0x0010000000000005);
				UProperty* NewProp_JumpHeight = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("JumpHeight"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(JumpHeight, UCustomMovementComponent), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanJump, UCustomMovementComponent, bool);
				UProperty* NewProp_bCanJump = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanJump"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanJump, UCustomMovementComponent), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bCanJump, UCustomMovementComponent), sizeof(bool), true);
				UProperty* NewProp_GravityScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GravityScale"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GravityScale, UCustomMovementComponent), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_CapsuleHited(), "CapsuleHited"); // 1910416149
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_ClearPlanet(), "ClearPlanet"); // 4160573103
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_GetCurrentPlanet(), "GetCurrentPlanet"); // 2085485185
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_GetCurrentWalkSpeed(), "GetCurrentWalkSpeed"); // 1724056540
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_GetFallingSpeed(), "GetFallingSpeed"); // 1534733745
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_GetFallingVelocity(), "GetFallingVelocity"); // 1412580727
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_GetGravityDirection(), "GetGravityDirection"); // 698099429
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_GetGravityPower(), "GetGravityPower"); // 4207971293
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_GetInAirTime(), "GetInAirTime"); // 4250920251
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_GetMovementVelocity(), "GetMovementVelocity"); // 2579930654
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_IsSprinting(), "IsSprinting"); // 3768565459
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_RequestGavityImmediateUpdate(), "RequestGavityImmediateUpdate"); // 1179852069
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_SetComponentOwner(), "SetComponentOwner"); // 121961704
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_UCustomMovementComponent_SetCurrentPlanet(), "SetCurrentPlanet"); // 506058938
				OuterClass->ClassConfigName = FName(TEXT("Engine"));
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Components/CustomMovementComponent.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_CapsuleHitResult, TEXT("Category"), TEXT("Custom Movement Component"));
				MetaData->SetValue(NewProp_CapsuleHitResult, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_CapsuleHitResult, TEXT("ToolTip"), TEXT("Information about the surface the pawn is standing on (Updated only when is moving on ground and VericalOrientation is based on surface Normal."));
				MetaData->SetValue(NewProp_CurrentTracedSurface, TEXT("Category"), TEXT("Custom Movement Component"));
				MetaData->SetValue(NewProp_CurrentTracedSurface, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_CurrentTracedSurface, TEXT("ToolTip"), TEXT("Information about the surface the custom pawn is standing on (Updated only when is moving on ground and VericalOrientation is based on surface Normal."));
				MetaData->SetValue(NewProp_CurrentStandingSurface, TEXT("Category"), TEXT("Custom Movement Component"));
				MetaData->SetValue(NewProp_CurrentStandingSurface, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_CurrentStandingSurface, TEXT("ToolTip"), TEXT("Information about the surface the custom pawn is standing on."));
				MetaData->SetValue(NewProp_bAllowDownwardForce, TEXT("Category"), TEXT("Custom Movement Component : Physics Interaction"));
				MetaData->SetValue(NewProp_bAllowDownwardForce, TEXT("editcondition"), TEXT("bEnablePhysicsInteraction"));
				MetaData->SetValue(NewProp_bAllowDownwardForce, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_bAllowDownwardForce, TEXT("ToolTip"), TEXT("If enabled, the TouchForceFactor is applied per kg mass of the affected object."));
				MetaData->SetValue(NewProp_bHitForceScaledToMass, TEXT("Category"), TEXT("Custom Movement Component : Physics Interaction"));
				MetaData->SetValue(NewProp_bHitForceScaledToMass, TEXT("editcondition"), TEXT("bEnablePhysicsInteraction"));
				MetaData->SetValue(NewProp_bHitForceScaledToMass, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_bHitForceScaledToMass, TEXT("ToolTip"), TEXT("If enabled, the TouchForceFactor is applied per kg mass of the affected object."));
				MetaData->SetValue(NewProp_HitForceFactor, TEXT("Category"), TEXT("Custom Movement Component : Physics Interaction"));
				MetaData->SetValue(NewProp_HitForceFactor, TEXT("editcondition"), TEXT("bEnablePhysicsInteraction"));
				MetaData->SetValue(NewProp_HitForceFactor, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_HitForceFactor, TEXT("ToolTip"), TEXT("Force to apply to physics objects that are touched by the player."));
				MetaData->SetValue(NewProp_bEnablePhysicsInteraction, TEXT("Category"), TEXT("Custom Movement Component : Physics Interaction"));
				MetaData->SetValue(NewProp_bEnablePhysicsInteraction, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_bEnablePhysicsInteraction, TEXT("ToolTip"), TEXT("If enabled, the player will interact with physics objects when walking into them."));
				MetaData->SetValue(NewProp_TraceShapeScale, TEXT("Category"), TEXT("Custom Movement Component : Surface Based Gravity"));
				MetaData->SetValue(NewProp_TraceShapeScale, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_TraceShapeScale, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_TraceShapeScale, TEXT("editcondition"), TEXT("!bUseCapsuleHit"));
				MetaData->SetValue(NewProp_TraceShapeScale, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_TraceShapeScale, TEXT("ToolTip"), TEXT("Trace Shape Scale (between 0 and 1) .\n0.0f means shape radius/extent equal to 0.0f\n1.0 means shape radius/extent equal to custom pawn's capsule radius."));
				MetaData->SetValue(NewProp_TraceShapeScale, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_TraceShapeScale, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_TraceChannel, TEXT("Category"), TEXT("Custom Movement Component : Surface Based Gravity"));
				MetaData->SetValue(NewProp_TraceChannel, TEXT("editcondition"), TEXT("!bUseCapsuleHit"));
				MetaData->SetValue(NewProp_TraceChannel, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_TraceChannel, TEXT("ToolTip"), TEXT("Trace Collision Channel .\nDefault value \"Pawn\" same as the capsule collision objectType.\nUseful to change it from \"Pawn\" , if we want to not follow some surfaces normal even if the capsule is standing on \""));
				MetaData->SetValue(NewProp_TraceShape, TEXT("Category"), TEXT("Custom Movement Component : Surface Based Gravity"));
				MetaData->SetValue(NewProp_TraceShape, TEXT("editcondition"), TEXT("!bUseCapsuleHit"));
				MetaData->SetValue(NewProp_TraceShape, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_TraceShape, TEXT("ToolTip"), TEXT("Editable if UseCapsuleHit is set to true .\nTrace shape used to test the surface the custom pawn is standing on ."));
				MetaData->SetValue(NewProp_bUseCapsuleHit, TEXT("Category"), TEXT("Custom Movement Component : Surface Based Gravity"));
				MetaData->SetValue(NewProp_bUseCapsuleHit, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_bUseCapsuleHit, TEXT("ToolTip"), TEXT("If enabled, custom pawn's capsule hit results with be used instead of trace hit results."));
				MetaData->SetValue(NewProp_SurfaceBasedGravityInfo, TEXT("Category"), TEXT("Custom Movement Component : Surface Based Gravity"));
				MetaData->SetValue(NewProp_SurfaceBasedGravityInfo, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_SurfaceBasedGravityInfo, TEXT("ToolTip"), TEXT("Surface Based Gravity Information , if Vertical Orientation is set to \"Surface Normal\"."));
				MetaData->SetValue(NewProp_PlanetActor, TEXT("Category"), TEXT("Custom Movement Component : Custom Gravity"));
				MetaData->SetValue(NewProp_PlanetActor, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_PlanetActor, TEXT("ToolTip"), TEXT("Planet Actor Reference .\nNeeded when \"Custom Gravity Type\" is set to \"Point Gravity\"\nIf \"Point Gravity\" is selected and \"Planet Actor\" is null , No gravity will be applied."));
				MetaData->SetValue(NewProp_CustomGravityInfo, TEXT("Category"), TEXT("Custom Movement Component : Custom Gravity"));
				MetaData->SetValue(NewProp_CustomGravityInfo, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_CustomGravityInfo, TEXT("ToolTip"), TEXT("Custom gravity Information , if \"Custom Gravity Type\" is set to \"Custom Gravity\"."));
				MetaData->SetValue(NewProp_CustomGravityType, TEXT("Category"), TEXT("Custom Movement Component : Custom Gravity"));
				MetaData->SetValue(NewProp_CustomGravityType, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_CustomGravityType, TEXT("ToolTip"), TEXT("Gravity Type\nUsed if Vertical Orientation is set to \"Gravity Direction\""));
				MetaData->SetValue(NewProp_DebugDrawType, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_DebugDrawType, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_DebugDrawType, TEXT("ToolTip"), TEXT("Traces Debug Draw Type"));
				MetaData->SetValue(NewProp_OrientationSettings, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_OrientationSettings, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_OrientationSettings, TEXT("ToolTip"), TEXT("Orientation Settings for each gravity mode:\n-IsInstant : If true , the orientation is instant;\n-RotationInterpSpeed : Orientation speed , if IsInstant is false;"));
				MetaData->SetValue(NewProp_FallingVerticalOrientation, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_FallingVerticalOrientation, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_FallingVerticalOrientation, TEXT("ToolTip"), TEXT("Determine pawn's vertical orientation when is falling"));
				MetaData->SetValue(NewProp_StandingVerticalOrientation, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_StandingVerticalOrientation, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_StandingVerticalOrientation, TEXT("ToolTip"), TEXT("Determine pawn's vertical orientation when is moving on ground"));
				MetaData->SetValue(NewProp_bResetVelocityOnGravitySwitch, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_bResetVelocityOnGravitySwitch, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_bResetVelocityOnGravitySwitch, TEXT("ToolTip"), TEXT("If true, set the pawn's velocity to Zero before changing the gravity direction"));
				MetaData->SetValue(NewProp_GravitySwitchDelay, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_GravitySwitchDelay, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_GravitySwitchDelay, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_GravitySwitchDelay, TEXT("ToolTip"), TEXT("When falling, amount of  time before switch from StandingOrientation to FallingOrientation."));
				MetaData->SetValue(NewProp_GravitySwitchDelay, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_AirControlRatio, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_AirControlRatio, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_AirControlRatio, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_AirControlRatio, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_AirControlRatio, TEXT("ToolTip"), TEXT("When falling, amount of lateral movement control available to the character.\n0 = no control, 1 = full control at max speed of MaxWalkSpeed."));
				MetaData->SetValue(NewProp_AirControlRatio, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_AirControlRatio, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_SpeedBoostMultiplier, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_SpeedBoostMultiplier, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_SpeedBoostMultiplier, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_SpeedBoostMultiplier, TEXT("ToolTip"), TEXT("When sprinting, multiplier applied to Max Walk Speed"));
				MetaData->SetValue(NewProp_SpeedBoostMultiplier, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_GroundHitToleranceDistance, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_GroundHitToleranceDistance, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_GroundHitToleranceDistance, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_GroundHitToleranceDistance, TEXT("ToolTip"), TEXT("Maximum acceptable distance for custom pawn capsule/sphere to walk above a surface."));
				MetaData->SetValue(NewProp_GroundHitToleranceDistance, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_JumpHeight, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_JumpHeight, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_JumpHeight, TEXT("ToolTip"), TEXT("Desired jump height"));
				MetaData->SetValue(NewProp_bCanJump, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_bCanJump, TEXT("DisplayName"), TEXT("Can Jump"));
				MetaData->SetValue(NewProp_bCanJump, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_bCanJump, TEXT("ToolTip"), TEXT("If true, Pawn can jump."));
				MetaData->SetValue(NewProp_GravityScale, TEXT("Category"), TEXT("Custom Movement Component : General Settings"));
				MetaData->SetValue(NewProp_GravityScale, TEXT("ModuleRelativePath"), TEXT("Public/Components/CustomMovementComponent.h"));
				MetaData->SetValue(NewProp_GravityScale, TEXT("ToolTip"), TEXT("Custom Gravity Scale.\nGravity is multiplied by this amount for the Component Owner (Pawn).\nIn DefaultGravity case : 0 = No Gravity , Other value than 0 = Default Gravity is enabled"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_UCustomMovementComponent(Z_Construct_UClass_UCustomMovementComponent, &UCustomMovementComponent::StaticClass, TEXT("UCustomMovementComponent"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(UCustomMovementComponent);
	UFunction* Z_Construct_UFunction_ACustomPawn_AddCameraPitchInput()
	{
		struct CustomPawn_eventAddCameraPitchInput_Parms
		{
			float UpdateRate;
			float ScaleValue;
		};
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddCameraPitchInput"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CustomPawn_eventAddCameraPitchInput_Parms));
			UProperty* NewProp_ScaleValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScaleValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScaleValue, CustomPawn_eventAddCameraPitchInput_Parms), 0x0010000000000080);
			UProperty* NewProp_UpdateRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UpdateRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UpdateRate, CustomPawn_eventAddCameraPitchInput_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ScaleValue"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_UpdateRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Add input (affecting Pitch) to the SpringArm relative rotation.\nThe added value is the product of UpdateRate & ScaleValue."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ACustomPawn_AddCameraYawInput()
	{
		struct CustomPawn_eventAddCameraYawInput_Parms
		{
			float UpdateRate;
			float ScaleValue;
		};
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddCameraYawInput"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CustomPawn_eventAddCameraYawInput_Parms));
			UProperty* NewProp_ScaleValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScaleValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScaleValue, CustomPawn_eventAddCameraYawInput_Parms), 0x0010000000000080);
			UProperty* NewProp_UpdateRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UpdateRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UpdateRate, CustomPawn_eventAddCameraYawInput_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ScaleValue"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_UpdateRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Add input (affecting Yaw) to the SpringArm relative rotation.\nThe added value is the product of UpdateRate & ScaleValue."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ACustomPawn_AddForwardMovementInput()
	{
		struct CustomPawn_eventAddForwardMovementInput_Parms
		{
			float ScaleValue;
			bool bForce;
		};
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddForwardMovementInput"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CustomPawn_eventAddForwardMovementInput_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForce, CustomPawn_eventAddForwardMovementInput_Parms, bool);
			UProperty* NewProp_bForce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bForce"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForce, CustomPawn_eventAddForwardMovementInput_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bForce, CustomPawn_eventAddForwardMovementInput_Parms), sizeof(bool), true);
			UProperty* NewProp_ScaleValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScaleValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScaleValue, CustomPawn_eventAddForwardMovementInput_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bForce"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ScaleValue"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called to move custom pawn Forward and Backward"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ACustomPawn_AddRightMovementInput()
	{
		struct CustomPawn_eventAddRightMovementInput_Parms
		{
			float ScaleValue;
			bool bForce;
		};
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddRightMovementInput"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(CustomPawn_eventAddRightMovementInput_Parms));
			CPP_BOOL_PROPERTY_BITMASK_STRUCT(bForce, CustomPawn_eventAddRightMovementInput_Parms, bool);
			UProperty* NewProp_bForce = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("bForce"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bForce, CustomPawn_eventAddRightMovementInput_Parms), 0x0010000000000080, CPP_BOOL_PROPERTY_BITMASK(bForce, CustomPawn_eventAddRightMovementInput_Parms), sizeof(bool), true);
			UProperty* NewProp_ScaleValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScaleValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScaleValue, CustomPawn_eventAddRightMovementInput_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_bForce"), TEXT("false"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ScaleValue"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called to move custom pawn Left and Right"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ACustomPawn_DisableDebugging()
	{
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("DisableDebugging"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn|Debuging"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called to disable CustomPawn & MovementComponent debugging."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ACustomPawn_EnableDebugging()
	{
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EnableDebugging"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn|Debuging"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called to enable CustomPawn & MovementComponent debugging."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ACustomPawn_GetCurrentForwardDirection()
	{
		struct CustomPawn_eventGetCurrentForwardDirection_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentForwardDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CustomPawn_eventGetCurrentForwardDirection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CustomPawn_eventGetCurrentForwardDirection_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Current Forward Movement Direction."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ACustomPawn_GetCurrentRightDirection()
	{
		struct CustomPawn_eventGetCurrentRightDirection_Parms
		{
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetCurrentRightDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54820401, 65535, sizeof(CustomPawn_eventGetCurrentRightDirection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, CustomPawn_eventGetCurrentRightDirection_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns Current Right Movement Direction."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ACustomPawn_Jump()
	{
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Jump"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Handle jump action."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ACustomPawn_Sprint()
	{
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Sprint"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Handle sprint action."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_ACustomPawn_StopSprint()
	{
		UObject* Outer=Z_Construct_UClass_ACustomPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("StopSprint"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("Pawn|CustomPawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Handle stopping sprint action."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_ACustomPawn_NoRegister()
	{
		return ACustomPawn::StaticClass();
	}
	UClass* Z_Construct_UClass_ACustomPawn()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APawn();
			Z_Construct_UPackage__Script_CustomGravityPlugin();
			OuterClass = ACustomPawn::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_AddCameraPitchInput());
				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_AddCameraYawInput());
				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_AddForwardMovementInput());
				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_AddRightMovementInput());
				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_DisableDebugging());
				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_EnableDebugging());
				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_GetCurrentForwardDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_GetCurrentRightDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_Jump());
				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_Sprint());
				OuterClass->LinkChild(Z_Construct_UFunction_ACustomPawn_StopSprint());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_UpArrowComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("UpArrowComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(UpArrowComponent, ACustomPawn), 0x00400000000b001d, Z_Construct_UClass_UArrowComponent_NoRegister());
				UProperty* NewProp_RightArrowComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RightArrowComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(RightArrowComponent, ACustomPawn), 0x00400000000b001d, Z_Construct_UClass_UArrowComponent_NoRegister());
				UProperty* NewProp_ForwardArrowComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForwardArrowComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(ForwardArrowComponent, ACustomPawn), 0x00400000000b001d, Z_Construct_UClass_UArrowComponent_NoRegister());
				UProperty* NewProp_GizmoRootComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GizmoRootComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GizmoRootComponent, ACustomPawn), 0x00400000000b001d, Z_Construct_UClass_USceneComponent_NoRegister());
				UProperty* NewProp_PawnMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PawnMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PawnMesh, ACustomPawn), 0x00400000000b001d, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
				UProperty* NewProp_MovementComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MovementComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MovementComponent, ACustomPawn), 0x00400000000b001d, Z_Construct_UClass_UCustomMovementComponent_NoRegister());
				UProperty* NewProp_Camera = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Camera"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Camera, ACustomPawn), 0x00400000000b001d, Z_Construct_UClass_UCameraComponent_NoRegister());
				UProperty* NewProp_SpringArm = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpringArm"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SpringArm, ACustomPawn), 0x00400000000b001d, Z_Construct_UClass_USpringArmComponent_NoRegister());
				UProperty* NewProp_CapsuleComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CapsuleComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(CapsuleComponent, ACustomPawn), 0x00400000000b001d, Z_Construct_UClass_UCapsuleComponent_NoRegister());
				UProperty* NewProp_CameraPitchMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraPitchMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CameraPitchMax, ACustomPawn), 0x0010000000000005);
				UProperty* NewProp_CameraPitchMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraPitchMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CameraPitchMin, ACustomPawn), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_AddCameraPitchInput(), "AddCameraPitchInput"); // 1666811416
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_AddCameraYawInput(), "AddCameraYawInput"); // 1479850455
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_AddForwardMovementInput(), "AddForwardMovementInput"); // 3587963542
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_AddRightMovementInput(), "AddRightMovementInput"); // 3699884674
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_DisableDebugging(), "DisableDebugging"); // 3523824160
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_EnableDebugging(), "EnableDebugging"); // 2237422981
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_GetCurrentForwardDirection(), "GetCurrentForwardDirection"); // 423721695
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_GetCurrentRightDirection(), "GetCurrentRightDirection"); // 1890575544
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_Jump(), "Jump"); // 2640333253
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_Sprint(), "Sprint"); // 4272773924
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_ACustomPawn_StopSprint(), "StopSprint"); // 3815930703
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Pawns/CustomPawn.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_UpArrowComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_UpArrowComponent, TEXT("Category"), TEXT("Custom Pawn"));
				MetaData->SetValue(NewProp_UpArrowComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_UpArrowComponent, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_UpArrowComponent, TEXT("ToolTip"), TEXT("Up Arrow Component."));
				MetaData->SetValue(NewProp_RightArrowComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_RightArrowComponent, TEXT("Category"), TEXT("Custom Pawn"));
				MetaData->SetValue(NewProp_RightArrowComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_RightArrowComponent, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_RightArrowComponent, TEXT("ToolTip"), TEXT("Right Arrow Component"));
				MetaData->SetValue(NewProp_ForwardArrowComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_ForwardArrowComponent, TEXT("Category"), TEXT("Custom Pawn"));
				MetaData->SetValue(NewProp_ForwardArrowComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_ForwardArrowComponent, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_ForwardArrowComponent, TEXT("ToolTip"), TEXT("Forward Arrow Component"));
				MetaData->SetValue(NewProp_GizmoRootComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_GizmoRootComponent, TEXT("Category"), TEXT("Custom Pawn"));
				MetaData->SetValue(NewProp_GizmoRootComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_GizmoRootComponent, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_GizmoRootComponent, TEXT("ToolTip"), TEXT("Gizmo used as debug arrows root component."));
				MetaData->SetValue(NewProp_PawnMesh, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_PawnMesh, TEXT("Category"), TEXT("Custom Pawn"));
				MetaData->SetValue(NewProp_PawnMesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_PawnMesh, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_PawnMesh, TEXT("ToolTip"), TEXT("Skeletal mesh associated with this Pawn."));
				MetaData->SetValue(NewProp_MovementComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_MovementComponent, TEXT("Category"), TEXT("Custom Pawn"));
				MetaData->SetValue(NewProp_MovementComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_MovementComponent, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_MovementComponent, TEXT("ToolTip"), TEXT("Movement component used for movement."));
				MetaData->SetValue(NewProp_Camera, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_Camera, TEXT("Category"), TEXT("Custom Pawn"));
				MetaData->SetValue(NewProp_Camera, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Camera, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_Camera, TEXT("ToolTip"), TEXT("the main camera associated with this Pawn ."));
				MetaData->SetValue(NewProp_SpringArm, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_SpringArm, TEXT("Category"), TEXT("Custom Pawn"));
				MetaData->SetValue(NewProp_SpringArm, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SpringArm, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_SpringArm, TEXT("ToolTip"), TEXT("The camera boom."));
				MetaData->SetValue(NewProp_CapsuleComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_CapsuleComponent, TEXT("Category"), TEXT("Custom Pawn"));
				MetaData->SetValue(NewProp_CapsuleComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_CapsuleComponent, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_CapsuleComponent, TEXT("ToolTip"), TEXT("The CapsuleComponent being used for movement collision (by CharacterMovement)."));
				MetaData->SetValue(NewProp_CameraPitchMax, TEXT("Category"), TEXT("Custom Pawn : Camera Settings"));
				MetaData->SetValue(NewProp_CameraPitchMax, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_CameraPitchMax, TEXT("ToolTip"), TEXT("Maximum view Pitch, in degrees."));
				MetaData->SetValue(NewProp_CameraPitchMin, TEXT("Category"), TEXT("Custom Pawn : Camera Settings"));
				MetaData->SetValue(NewProp_CameraPitchMin, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/CustomPawn.h"));
				MetaData->SetValue(NewProp_CameraPitchMin, TEXT("ToolTip"), TEXT("Minimum view Pitch, in degrees."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ACustomPawn(Z_Construct_UClass_ACustomPawn, &ACustomPawn::StaticClass, TEXT("ACustomPawn"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ACustomPawn);
	UClass* Z_Construct_UClass_AFirstPersonCharacter_NoRegister()
	{
		return AFirstPersonCharacter::StaticClass();
	}
	UClass* Z_Construct_UClass_AFirstPersonCharacter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACustomPawn();
			Z_Construct_UPackage__Script_CustomGravityPlugin();
			OuterClass = AFirstPersonCharacter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Shooter = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Shooter"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Shooter, AFirstPersonCharacter), 0x00400000000b001d, Z_Construct_UClass_USceneComponent_NoRegister());
				UProperty* NewProp_GunMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GunMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GunMesh, AFirstPersonCharacter), 0x00400000000b001d, Z_Construct_UClass_USkeletalMeshComponent_NoRegister());
				UProperty* NewProp_GunSocketName = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GunSocketName"), RF_Public|RF_Transient|RF_MarkAsNative) UNameProperty(CPP_PROPERTY_BASE(GunSocketName, AFirstPersonCharacter), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Pawns/FirstPersonCharacter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/FirstPersonCharacter.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_Shooter, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_Shooter, TEXT("Category"), TEXT("Base Pawn"));
				MetaData->SetValue(NewProp_Shooter, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Shooter, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/FirstPersonCharacter.h"));
				MetaData->SetValue(NewProp_Shooter, TEXT("ToolTip"), TEXT("Shooter ( Holds Shoot Transform information ."));
				MetaData->SetValue(NewProp_GunMesh, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_GunMesh, TEXT("Category"), TEXT("Base Pawn"));
				MetaData->SetValue(NewProp_GunMesh, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_GunMesh, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/FirstPersonCharacter.h"));
				MetaData->SetValue(NewProp_GunMesh, TEXT("ToolTip"), TEXT("Gun Skeletal mesh associated with this Pawn ."));
				MetaData->SetValue(NewProp_GunSocketName, TEXT("Category"), TEXT("Custom Pawn : Gun Socket"));
				MetaData->SetValue(NewProp_GunSocketName, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/FirstPersonCharacter.h"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AFirstPersonCharacter(Z_Construct_UClass_AFirstPersonCharacter, &AFirstPersonCharacter::StaticClass, TEXT("AFirstPersonCharacter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AFirstPersonCharacter);
	UClass* Z_Construct_UClass_AThirdPersonBall_NoRegister()
	{
		return AThirdPersonBall::StaticClass();
	}
	UClass* Z_Construct_UClass_AThirdPersonBall()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACustomPawn();
			Z_Construct_UPackage__Script_CustomGravityPlugin();
			OuterClass = AThirdPersonBall::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_Ball = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Ball"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Ball, AThirdPersonBall), 0x00200800000b001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
				UProperty* NewProp_MinVelocityToRotateBall = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinVelocityToRotateBall"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinVelocityToRotateBall, AThirdPersonBall), 0x0010000000000005);
				UProperty* NewProp_RotationInterpSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationInterpSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RotationInterpSpeed, AThirdPersonBall), 0x0010000000000005);
				UProperty* NewProp_BallRotationRate = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("BallRotationRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(BallRotationRate, AThirdPersonBall), 0x0010000000000005);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Pawns/ThirdPersonBall.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonBall.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_Ball, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_Ball, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_Ball, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Ball, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonBall.h"));
				MetaData->SetValue(NewProp_Ball, TEXT("ToolTip"), TEXT("StaticMesh used for the ball"));
				MetaData->SetValue(NewProp_MinVelocityToRotateBall, TEXT("Category"), TEXT("Custom Pawn : Mesh Rotation Settings"));
				MetaData->SetValue(NewProp_MinVelocityToRotateBall, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_MinVelocityToRotateBall, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonBall.h"));
				MetaData->SetValue(NewProp_MinVelocityToRotateBall, TEXT("ToolTip"), TEXT("Minimum Movement speed needed to rotate the ball"));
				MetaData->SetValue(NewProp_MinVelocityToRotateBall, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("Category"), TEXT("Custom Pawn : Mesh Rotation Settings"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonBall.h"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("ToolTip"), TEXT("How Smoothly go from Current Rotation to Desired Rotation"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("UIMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_BallRotationRate, TEXT("Category"), TEXT("Custom Pawn : Mesh Rotation Settings"));
				MetaData->SetValue(NewProp_BallRotationRate, TEXT("ClampMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_BallRotationRate, TEXT("ClampMin"), TEXT("0.0"));
				MetaData->SetValue(NewProp_BallRotationRate, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonBall.h"));
				MetaData->SetValue(NewProp_BallRotationRate, TEXT("ToolTip"), TEXT("Change in ball rotation per second (Between 0 & 1).\nDepends on custom pawn movement speed.\n0.0f : No Rotation.\n1.0f : Full Speed Rotation."));
				MetaData->SetValue(NewProp_BallRotationRate, TEXT("UIMax"), TEXT("1.0"));
				MetaData->SetValue(NewProp_BallRotationRate, TEXT("UIMin"), TEXT("0.0"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AThirdPersonBall(Z_Construct_UClass_AThirdPersonBall, &AThirdPersonBall::StaticClass, TEXT("AThirdPersonBall"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AThirdPersonBall);
	UEnum* Z_Construct_UEnum_CustomGravityPlugin_EMeshOrientation()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_CustomGravityPlugin();
		extern uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_EMeshOrientation_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("EMeshOrientation"), 0, Get_Z_Construct_UEnum_CustomGravityPlugin_EMeshOrientation_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("EMeshOrientation"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMeshOrientation::EMO_Movement")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMeshOrientation::EMO_Camera")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("EMeshOrientation::EMO_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::Namespaced);
			ReturnEnum->CppType = TEXT("EMeshOrientation::Type");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("EMO_Camera.DisplayName"), TEXT("Camera Direction"));
			MetaData->SetValue(ReturnEnum, TEXT("EMO_Movement.DisplayName"), TEXT("Movement Direction"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonCharacter.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_EMeshOrientation_CRC() { return 816917019U; }
	UClass* Z_Construct_UClass_AThirdPersonCharacter_NoRegister()
	{
		return AThirdPersonCharacter::StaticClass();
	}
	UClass* Z_Construct_UClass_AThirdPersonCharacter()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_ACustomPawn();
			Z_Construct_UPackage__Script_CustomGravityPlugin();
			OuterClass = AThirdPersonCharacter::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_RotationInterpSpeed = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RotationInterpSpeed"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RotationInterpSpeed, AThirdPersonCharacter), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bInstantRotation, AThirdPersonCharacter, bool);
				UProperty* NewProp_bInstantRotation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bInstantRotation"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bInstantRotation, AThirdPersonCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bInstantRotation, AThirdPersonCharacter), sizeof(bool), true);
				UProperty* NewProp_MinVelocityToRotateMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MinVelocityToRotateMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(MinVelocityToRotateMesh, AThirdPersonCharacter), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bRotateMeshOnlyWhenMoving, AThirdPersonCharacter, bool);
				UProperty* NewProp_bRotateMeshOnlyWhenMoving = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bRotateMeshOnlyWhenMoving"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bRotateMeshOnlyWhenMoving, AThirdPersonCharacter), 0x0010000000000005, CPP_BOOL_PROPERTY_BITMASK(bRotateMeshOnlyWhenMoving, AThirdPersonCharacter), sizeof(bool), true);
				UProperty* NewProp_MeshOrientation = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshOrientation"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(MeshOrientation, AThirdPersonCharacter), 0x0010000000000005, Z_Construct_UEnum_CustomGravityPlugin_EMeshOrientation());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Pawns/ThirdPersonCharacter.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonCharacter.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("Category"), TEXT("Custom Pawn : Mesh Rotation Settings"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("editcondition"), TEXT("!bInstantRotation"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonCharacter.h"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("ToolTip"), TEXT("Controls how smooth the rotation is done , editable if InstantRotation is false"));
				MetaData->SetValue(NewProp_RotationInterpSpeed, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_bInstantRotation, TEXT("Category"), TEXT("Custom Pawn : Mesh Rotation Settings"));
				MetaData->SetValue(NewProp_bInstantRotation, TEXT("editcondition"), TEXT("bRotateMeshOnlyWhenMoving"));
				MetaData->SetValue(NewProp_bInstantRotation, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonCharacter.h"));
				MetaData->SetValue(NewProp_bInstantRotation, TEXT("ToolTip"), TEXT("if true , instantly rotate the character mesh toward the desired rotation.\nif false , smoothly rotate the character mesh toward the desired rotation."));
				MetaData->SetValue(NewProp_MinVelocityToRotateMesh, TEXT("Category"), TEXT("Custom Pawn : Mesh Rotation Settings"));
				MetaData->SetValue(NewProp_MinVelocityToRotateMesh, TEXT("ClampMin"), TEXT("0"));
				MetaData->SetValue(NewProp_MinVelocityToRotateMesh, TEXT("editcondition"), TEXT("bRotateMeshOnlyWhenMoving"));
				MetaData->SetValue(NewProp_MinVelocityToRotateMesh, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonCharacter.h"));
				MetaData->SetValue(NewProp_MinVelocityToRotateMesh, TEXT("ToolTip"), TEXT("Minimum Movement speed needed to orient the mesh toward the desired direction"));
				MetaData->SetValue(NewProp_MinVelocityToRotateMesh, TEXT("UIMin"), TEXT("0"));
				MetaData->SetValue(NewProp_bRotateMeshOnlyWhenMoving, TEXT("Category"), TEXT("Custom Pawn : Mesh Rotation Settings"));
				MetaData->SetValue(NewProp_bRotateMeshOnlyWhenMoving, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonCharacter.h"));
				MetaData->SetValue(NewProp_bRotateMeshOnlyWhenMoving, TEXT("ToolTip"), TEXT("if true , rotate the mesh only when the custom pawn is moving ."));
				MetaData->SetValue(NewProp_MeshOrientation, TEXT("Category"), TEXT("Custom Pawn : Mesh Rotation Settings"));
				MetaData->SetValue(NewProp_MeshOrientation, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/ThirdPersonCharacter.h"));
				MetaData->SetValue(NewProp_MeshOrientation, TEXT("ToolTip"), TEXT("Set Mesh Orientation.\nrotate the Character toward the direction of :\n-Movement Direction\n-Camera Direction"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_AThirdPersonCharacter(Z_Construct_UClass_AThirdPersonCharacter, &AThirdPersonCharacter::StaticClass, TEXT("AThirdPersonCharacter"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(AThirdPersonCharacter);
	UClass* Z_Construct_UClass_ACustomPhysicsActor_NoRegister()
	{
		return ACustomPhysicsActor::StaticClass();
	}
	UClass* Z_Construct_UClass_ACustomPhysicsActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_CustomGravityPlugin();
			OuterClass = ACustomPhysicsActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;


PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GravityComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GravityComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GravityComponent, ACustomPhysicsActor), 0x00400000000a001d, Z_Construct_UClass_UCustomGravityComponent_NoRegister());
				UProperty* NewProp_MeshComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MeshComponent, ACustomPhysicsActor), 0x00400000000a001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Actors/CustomPhysicsActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Actors/CustomPhysicsActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_GravityComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_GravityComponent, TEXT("Category"), TEXT("CustomPhysicsActor"));
				MetaData->SetValue(NewProp_GravityComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_GravityComponent, TEXT("ModuleRelativePath"), TEXT("Public/Actors/CustomPhysicsActor.h"));
				MetaData->SetValue(NewProp_GravityComponent, TEXT("ToolTip"), TEXT("Gravity Component"));
				MetaData->SetValue(NewProp_MeshComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_MeshComponent, TEXT("Category"), TEXT("CustomPhysicsActor"));
				MetaData->SetValue(NewProp_MeshComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_MeshComponent, TEXT("ModuleRelativePath"), TEXT("Public/Actors/CustomPhysicsActor.h"));
				MetaData->SetValue(NewProp_MeshComponent, TEXT("ToolTip"), TEXT("StaticMesh Component"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_ACustomPhysicsActor(Z_Construct_UClass_ACustomPhysicsActor, &ACustomPhysicsActor::StaticClass, TEXT("ACustomPhysicsActor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(ACustomPhysicsActor);
	UFunction* Z_Construct_UFunction_APhysicsBallPawn_AddCameraPitchInput()
	{
		struct PhysicsBallPawn_eventAddCameraPitchInput_Parms
		{
			float UpdateRate;
			float ScaleValue;
		};
		UObject* Outer=Z_Construct_UClass_APhysicsBallPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddCameraPitchInput"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PhysicsBallPawn_eventAddCameraPitchInput_Parms));
			UProperty* NewProp_ScaleValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScaleValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScaleValue, PhysicsBallPawn_eventAddCameraPitchInput_Parms), 0x0010000000000080);
			UProperty* NewProp_UpdateRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UpdateRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UpdateRate, PhysicsBallPawn_eventAddCameraPitchInput_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("BasePawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ScaleValue"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_UpdateRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Add input (affecting Pitch) to the SpringArm relative rotation.\nThe added value is the product of UpdateRate & ScaleValue."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_APhysicsBallPawn_AddCameraYawInput()
	{
		struct PhysicsBallPawn_eventAddCameraYawInput_Parms
		{
			float UpdateRate;
			float ScaleValue;
		};
		UObject* Outer=Z_Construct_UClass_APhysicsBallPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddCameraYawInput"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PhysicsBallPawn_eventAddCameraYawInput_Parms));
			UProperty* NewProp_ScaleValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScaleValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScaleValue, PhysicsBallPawn_eventAddCameraYawInput_Parms), 0x0010000000000080);
			UProperty* NewProp_UpdateRate = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("UpdateRate"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(UpdateRate, PhysicsBallPawn_eventAddCameraYawInput_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("BasePawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_ScaleValue"), TEXT("0.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("CPP_Default_UpdateRate"), TEXT("1.000000"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Add input (affecting Yaw) to the SpringArm relative rotation.\nThe added value is the product of UpdateRate & ScaleValue."));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_APhysicsBallPawn_AddForwardTorque()
	{
		struct PhysicsBallPawn_eventAddForwardTorque_Parms
		{
			float ScaleValue;
		};
		UObject* Outer=Z_Construct_UClass_APhysicsBallPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddForwardTorque"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PhysicsBallPawn_eventAddForwardTorque_Parms));
			UProperty* NewProp_ScaleValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScaleValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScaleValue, PhysicsBallPawn_eventAddForwardTorque_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("BasePawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called to move ball forwards and backwards"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_APhysicsBallPawn_AddRightTorque()
	{
		struct PhysicsBallPawn_eventAddRightTorque_Parms
		{
			float ScaleValue;
		};
		UObject* Outer=Z_Construct_UClass_APhysicsBallPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("AddRightTorque"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PhysicsBallPawn_eventAddRightTorque_Parms));
			UProperty* NewProp_ScaleValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ScaleValue"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(ScaleValue, PhysicsBallPawn_eventAddRightTorque_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("BasePawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Called to move ball Left and Right"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_APhysicsBallPawn_Jump()
	{
		UObject* Outer=Z_Construct_UClass_APhysicsBallPawn();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("Jump"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("BasePawn|Input"));
			MetaData->SetValue(ReturnFunction, TEXT("Keywords"), TEXT("AddInput"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Handle jump action."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_APhysicsBallPawn_NoRegister()
	{
		return APhysicsBallPawn::StaticClass();
	}
	UClass* Z_Construct_UClass_APhysicsBallPawn()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_APawn();
			Z_Construct_UPackage__Script_CustomGravityPlugin();
			OuterClass = APhysicsBallPawn::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_APhysicsBallPawn_AddCameraPitchInput());
				OuterClass->LinkChild(Z_Construct_UFunction_APhysicsBallPawn_AddCameraYawInput());
				OuterClass->LinkChild(Z_Construct_UFunction_APhysicsBallPawn_AddForwardTorque());
				OuterClass->LinkChild(Z_Construct_UFunction_APhysicsBallPawn_AddRightTorque());
				OuterClass->LinkChild(Z_Construct_UFunction_APhysicsBallPawn_Jump());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_GravityComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GravityComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(GravityComponent, APhysicsBallPawn), 0x00400000000b001d, Z_Construct_UClass_UCustomGravityComponent_NoRegister());
				UProperty* NewProp_Camera = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Camera"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Camera, APhysicsBallPawn), 0x00400000000b001d, Z_Construct_UClass_UCameraComponent_NoRegister());
				UProperty* NewProp_SpringArm = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpringArm"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SpringArm, APhysicsBallPawn), 0x00400000000b001d, Z_Construct_UClass_USpringArmComponent_NoRegister());
				UProperty* NewProp_SpringRoot = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SpringRoot"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SpringRoot, APhysicsBallPawn), 0x00400000000b001d, Z_Construct_UClass_USceneComponent_NoRegister());
				UProperty* NewProp_Ball = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("Ball"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(Ball, APhysicsBallPawn), 0x00400000000b001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
				UProperty* NewProp_CameraPitchMax = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraPitchMax"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CameraPitchMax, APhysicsBallPawn), 0x0010000000000005);
				UProperty* NewProp_CameraPitchMin = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CameraPitchMin"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(CameraPitchMin, APhysicsBallPawn), 0x0010000000000005);
				UProperty* NewProp_RollTorque = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("RollTorque"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(RollTorque, APhysicsBallPawn), 0x0010000000000005);
				UProperty* NewProp_JumpImpulse = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("JumpImpulse"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(JumpImpulse, APhysicsBallPawn), 0x0010000000000005);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bCanJump, APhysicsBallPawn, bool);
				UProperty* NewProp_bCanJump = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bCanJump"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bCanJump, APhysicsBallPawn), 0x0010000000020005, CPP_BOOL_PROPERTY_BITMASK(bCanJump, APhysicsBallPawn), sizeof(bool), true);
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_APhysicsBallPawn_AddCameraPitchInput(), "AddCameraPitchInput"); // 2425948083
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_APhysicsBallPawn_AddCameraYawInput(), "AddCameraYawInput"); // 2032621060
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_APhysicsBallPawn_AddForwardTorque(), "AddForwardTorque"); // 1550329049
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_APhysicsBallPawn_AddRightTorque(), "AddRightTorque"); // 2286280370
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_APhysicsBallPawn_Jump(), "Jump"); // 4102911035
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("HideCategories"), TEXT("Navigation"));
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_GravityComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_GravityComponent, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_GravityComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_GravityComponent, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_GravityComponent, TEXT("ToolTip"), TEXT("Gravity Component"));
				MetaData->SetValue(NewProp_Camera, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_Camera, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_Camera, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Camera, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_Camera, TEXT("ToolTip"), TEXT("Camera to view the ball"));
				MetaData->SetValue(NewProp_SpringArm, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_SpringArm, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_SpringArm, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SpringArm, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_SpringArm, TEXT("ToolTip"), TEXT("Spring arm for positioning the camera above the ball"));
				MetaData->SetValue(NewProp_SpringRoot, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_SpringRoot, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_SpringRoot, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SpringRoot, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_SpringRoot, TEXT("ToolTip"), TEXT("Spring root Component"));
				MetaData->SetValue(NewProp_Ball, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_Ball, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_Ball, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_Ball, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_Ball, TEXT("ToolTip"), TEXT("StaticMesh used for the ball"));
				MetaData->SetValue(NewProp_CameraPitchMax, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_CameraPitchMax, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_CameraPitchMax, TEXT("ToolTip"), TEXT("Maximum view Pitch, in degrees."));
				MetaData->SetValue(NewProp_CameraPitchMin, TEXT("Category"), TEXT("Camera"));
				MetaData->SetValue(NewProp_CameraPitchMin, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_CameraPitchMin, TEXT("ToolTip"), TEXT("Minimum view Pitch, in degrees."));
				MetaData->SetValue(NewProp_RollTorque, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_RollTorque, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_RollTorque, TEXT("ToolTip"), TEXT("Torque to apply when trying to roll ball"));
				MetaData->SetValue(NewProp_JumpImpulse, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_JumpImpulse, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_JumpImpulse, TEXT("ToolTip"), TEXT("Vertical impulse to apply when pressing jump"));
				MetaData->SetValue(NewProp_bCanJump, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_bCanJump, TEXT("ModuleRelativePath"), TEXT("Public/Pawns/PhysicsBallPawn.h"));
				MetaData->SetValue(NewProp_bCanJump, TEXT("ToolTip"), TEXT("Indicates whether we can currently jump, use to prevent double jumping"));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_APhysicsBallPawn(Z_Construct_UClass_APhysicsBallPawn, &APhysicsBallPawn::StaticClass, TEXT("APhysicsBallPawn"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(APhysicsBallPawn);
	UEnum* Z_Construct_UEnum_CustomGravityPlugin_ECollisionType()
	{
		UPackage* Outer=Z_Construct_UPackage__Script_CustomGravityPlugin();
		extern uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_ECollisionType_CRC();
		static UEnum* ReturnEnum = FindExistingEnumIfHotReloadOrDynamic(Outer, TEXT("ECollisionType"), 0, Get_Z_Construct_UEnum_CustomGravityPlugin_ECollisionType_CRC(), false);
		if (!ReturnEnum)
		{
			ReturnEnum = new(EC_InternalUseOnlyConstructor, Outer, TEXT("ECollisionType"), RF_Public|RF_Transient|RF_MarkAsNative) UEnum(FObjectInitializer());
			TArray<TPair<FName, uint8>> EnumNames;
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECollisionType::ECol_Mesh")), 0));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECollisionType::ECol_Sphere")), 1));
			EnumNames.Add(TPairInitializer<FName, uint8>(FName(TEXT("ECollisionType::ECol_MAX")), 2));
			ReturnEnum->SetEnums(EnumNames, UEnum::ECppForm::EnumClass);
			ReturnEnum->CppType = TEXT("ECollisionType");
#if WITH_METADATA
			UMetaData* MetaData = ReturnEnum->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnEnum, TEXT("BlueprintType"), TEXT("true"));
			MetaData->SetValue(ReturnEnum, TEXT("ECol_Mesh.DisplayName"), TEXT("Mesh Collision"));
			MetaData->SetValue(ReturnEnum, TEXT("ECol_Sphere.DisplayName"), TEXT("Sphere Collision"));
			MetaData->SetValue(ReturnEnum, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
#endif
		}
		return ReturnEnum;
	}
	uint32 Get_Z_Construct_UEnum_CustomGravityPlugin_ECollisionType_CRC() { return 197717274U; }
	UFunction* Z_Construct_UFunction_APlanetActor_GetGravityDirection()
	{
		struct PlanetActor_eventGetGravityDirection_Parms
		{
			FVector TargetLocation;
			FVector ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_APlanetActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGravityDirection"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54C20401, 65535, sizeof(PlanetActor_eventGetGravityDirection_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PlanetActor_eventGetGravityDirection_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FVector());
			UProperty* NewProp_TargetLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TargetLocation, PlanetActor_eventGetGravityDirection_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PlanetActor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Returns a specific gravity direction based on the target location"));
			MetaData->SetValue(NewProp_TargetLocation, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_APlanetActor_GetGravityinfo()
	{
		struct PlanetActor_eventGetGravityinfo_Parms
		{
			FVector TargetLocation;
			FGravityInfo ReturnValue;
		};
		UObject* Outer=Z_Construct_UClass_APlanetActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("GetGravityinfo"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x54C20401, 65535, sizeof(PlanetActor_eventGetGravityinfo_Parms));
			UProperty* NewProp_ReturnValue = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("ReturnValue"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(ReturnValue, PlanetActor_eventGetGravityinfo_Parms), 0x0010000000000580, Z_Construct_UScriptStruct_FGravityInfo());
			UProperty* NewProp_TargetLocation = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("TargetLocation"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(TargetLocation, PlanetActor_eventGetGravityinfo_Parms), 0x0010000008000182, Z_Construct_UScriptStruct_FVector());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PlanetActor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Get the current planet gravity information.\nNB : Needs a target location."));
			MetaData->SetValue(NewProp_TargetLocation, TEXT("NativeConst"), TEXT(""));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_APlanetActor_SetForceMode()
	{
		struct PlanetActor_eventSetForceMode_Parms
		{
			TEnumAsByte<EForceMode::Type> newForceMode;
		};
		UObject* Outer=Z_Construct_UClass_APlanetActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetForceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PlanetActor_eventSetForceMode_Parms));
			UProperty* NewProp_newForceMode = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("newForceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(newForceMode, PlanetActor_eventSetForceMode_Parms), 0x0010000000000080, Z_Construct_UEnum_CustomGravityPlugin_EForceMode());
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PlanetActor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Update planet force mode"));
#endif
		}
		return ReturnFunction;
	}
	UFunction* Z_Construct_UFunction_APlanetActor_SetGravityPower()
	{
		struct PlanetActor_eventSetGravityPower_Parms
		{
			float NewGravity;
		};
		UObject* Outer=Z_Construct_UClass_APlanetActor();
		static UFunction* ReturnFunction = NULL;
		if (!ReturnFunction)
		{
			ReturnFunction = new(EC_InternalUseOnlyConstructor, Outer, TEXT("SetGravityPower"), RF_Public|RF_Transient|RF_MarkAsNative) UFunction(FObjectInitializer(), NULL, 0x04020401, 65535, sizeof(PlanetActor_eventSetGravityPower_Parms));
			UProperty* NewProp_NewGravity = new(EC_InternalUseOnlyConstructor, ReturnFunction, TEXT("NewGravity"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(NewGravity, PlanetActor_eventSetGravityPower_Parms), 0x0010000000000080);
			ReturnFunction->Bind();
			ReturnFunction->StaticLink();
#if WITH_METADATA
			UMetaData* MetaData = ReturnFunction->GetOutermost()->GetMetaData();
			MetaData->SetValue(ReturnFunction, TEXT("Category"), TEXT("PlanetActor"));
			MetaData->SetValue(ReturnFunction, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
			MetaData->SetValue(ReturnFunction, TEXT("ToolTip"), TEXT("Change planet gravity power."));
#endif
		}
		return ReturnFunction;
	}
	UClass* Z_Construct_UClass_APlanetActor_NoRegister()
	{
		return APlanetActor::StaticClass();
	}
	UClass* Z_Construct_UClass_APlanetActor()
	{
		static UClass* OuterClass = NULL;
		if (!OuterClass)
		{
			Z_Construct_UClass_AActor();
			Z_Construct_UPackage__Script_CustomGravityPlugin();
			OuterClass = APlanetActor::StaticClass();
			if (!(OuterClass->ClassFlags & CLASS_Constructed))
			{
				UObjectForceRegistration(OuterClass);
				OuterClass->ClassFlags |= 0x20900080;

				OuterClass->LinkChild(Z_Construct_UFunction_APlanetActor_GetGravityDirection());
				OuterClass->LinkChild(Z_Construct_UFunction_APlanetActor_GetGravityinfo());
				OuterClass->LinkChild(Z_Construct_UFunction_APlanetActor_SetForceMode());
				OuterClass->LinkChild(Z_Construct_UFunction_APlanetActor_SetGravityPower());

PRAGMA_DISABLE_DEPRECATION_WARNINGS
				UProperty* NewProp_SphereCollision = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SphereCollision"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(SphereCollision, APlanetActor), 0x00400000000b001d, Z_Construct_UClass_USphereComponent_NoRegister());
				UProperty* NewProp_MeshComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("MeshComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(MeshComponent, APlanetActor), 0x00400000000b001d, Z_Construct_UClass_UStaticMeshComponent_NoRegister());
				UProperty* NewProp_PlanetRootComponent = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlanetRootComponent"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PlanetRootComponent, APlanetActor), 0x00400000000b001d, Z_Construct_UClass_USceneComponent_NoRegister());
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bShouldUseStepping, APlanetActor, bool);
				UProperty* NewProp_bShouldUseStepping = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bShouldUseStepping"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bShouldUseStepping, APlanetActor), 0x0010000000000015, CPP_BOOL_PROPERTY_BITMASK(bShouldUseStepping, APlanetActor), sizeof(bool), true);
				UProperty* NewProp_GravityPower = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("GravityPower"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(GravityPower, APlanetActor), 0x0010000000000015);
				UProperty* NewProp_ForceMode = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("ForceMode"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(ForceMode, APlanetActor), 0x0010000000000015, Z_Construct_UEnum_CustomGravityPlugin_EForceMode());
				UProperty* NewProp_PlanetMeshScale = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlanetMeshScale"), RF_Public|RF_Transient|RF_MarkAsNative) UStructProperty(CPP_PROPERTY_BASE(PlanetMeshScale, APlanetActor), 0x0010000000000001, Z_Construct_UScriptStruct_FVector());
				UProperty* NewProp_PlanetMesh = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("PlanetMesh"), RF_Public|RF_Transient|RF_MarkAsNative) UObjectProperty(CPP_PROPERTY_BASE(PlanetMesh, APlanetActor), 0x0010000000000005, Z_Construct_UClass_UStaticMesh_NoRegister());
				UProperty* NewProp_SphereCollisionRaduis = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("SphereCollisionRaduis"), RF_Public|RF_Transient|RF_MarkAsNative) UFloatProperty(CPP_PROPERTY_BASE(SphereCollisionRaduis, APlanetActor), 0x0010000000000001);
				CPP_BOOL_PROPERTY_BITMASK_STRUCT(bSphereCollisionIsSelected, APlanetActor, bool);
				UProperty* NewProp_bSphereCollisionIsSelected = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("bSphereCollisionIsSelected"), RF_Public|RF_Transient|RF_MarkAsNative) UBoolProperty(FObjectInitializer(), EC_CppProperty, CPP_BOOL_PROPERTY_OFFSET(bSphereCollisionIsSelected, APlanetActor), 0x0010000000020015, CPP_BOOL_PROPERTY_BITMASK(bSphereCollisionIsSelected, APlanetActor), sizeof(bool), true);
				UProperty* NewProp_CollisionType = new(EC_InternalUseOnlyConstructor, OuterClass, TEXT("CollisionType"), RF_Public|RF_Transient|RF_MarkAsNative) UByteProperty(CPP_PROPERTY_BASE(CollisionType, APlanetActor), 0x0010000000000005, Z_Construct_UEnum_CustomGravityPlugin_ECollisionType());
PRAGMA_ENABLE_DEPRECATION_WARNINGS
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_APlanetActor_GetGravityDirection(), "GetGravityDirection"); // 3889135519
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_APlanetActor_GetGravityinfo(), "GetGravityinfo"); // 4033636997
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_APlanetActor_SetForceMode(), "SetForceMode"); // 2052700473
				OuterClass->AddFunctionToFunctionMapWithOverriddenName(Z_Construct_UFunction_APlanetActor_SetGravityPower(), "SetGravityPower"); // 3264448686
				OuterClass->StaticLink();
#if WITH_METADATA
				UMetaData* MetaData = OuterClass->GetOutermost()->GetMetaData();
				MetaData->SetValue(OuterClass, TEXT("IncludePath"), TEXT("Actors/PlanetActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(OuterClass, TEXT("ObjectInitializerConstructorDeclared"), TEXT(""));
				MetaData->SetValue(NewProp_SphereCollision, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_SphereCollision, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_SphereCollision, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_SphereCollision, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_SphereCollision, TEXT("ToolTip"), TEXT("Planet Sphere Collision.\nCreated only when CollisonType is set to \"Sphere Collision\".\nOtherwise the component is unregistered."));
				MetaData->SetValue(NewProp_MeshComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_MeshComponent, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_MeshComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_MeshComponent, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_MeshComponent, TEXT("ToolTip"), TEXT("Planet MeshComponet"));
				MetaData->SetValue(NewProp_PlanetRootComponent, TEXT("AllowPrivateAccess"), TEXT("true"));
				MetaData->SetValue(NewProp_PlanetRootComponent, TEXT("Category"), TEXT("Ball"));
				MetaData->SetValue(NewProp_PlanetRootComponent, TEXT("EditInline"), TEXT("true"));
				MetaData->SetValue(NewProp_PlanetRootComponent, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_PlanetRootComponent, TEXT("ToolTip"), TEXT("The root component of the planet"));
				MetaData->SetValue(NewProp_bShouldUseStepping, TEXT("Category"), TEXT("Planet Actor : General Settings"));
				MetaData->SetValue(NewProp_bShouldUseStepping, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_bShouldUseStepping, TEXT("ToolTip"), TEXT("If true, forces sub-stepping."));
				MetaData->SetValue(NewProp_GravityPower, TEXT("Category"), TEXT("Planet Actor : General Settings"));
				MetaData->SetValue(NewProp_GravityPower, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_GravityPower, TEXT("ToolTip"), TEXT("Planet gravity power."));
				MetaData->SetValue(NewProp_ForceMode, TEXT("Category"), TEXT("Planet Actor : General Settings"));
				MetaData->SetValue(NewProp_ForceMode, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_ForceMode, TEXT("ToolTip"), TEXT("Planet force mode : Acceleration or Force."));
				MetaData->SetValue(NewProp_PlanetMeshScale, TEXT("Category"), TEXT("Planet Actor : General Settings"));
				MetaData->SetValue(NewProp_PlanetMeshScale, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_PlanetMeshScale, TEXT("ToolTip"), TEXT("Planet Mesh scale"));
				MetaData->SetValue(NewProp_PlanetMesh, TEXT("Category"), TEXT("Planet Actor : General Settings"));
				MetaData->SetValue(NewProp_PlanetMesh, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_PlanetMesh, TEXT("ToolTip"), TEXT("Planet Static Mesh"));
				MetaData->SetValue(NewProp_SphereCollisionRaduis, TEXT("Category"), TEXT("Planet Actor : General Settings"));
				MetaData->SetValue(NewProp_SphereCollisionRaduis, TEXT("editcondition"), TEXT("bSphereCollisionIsSelected"));
				MetaData->SetValue(NewProp_SphereCollisionRaduis, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_SphereCollisionRaduis, TEXT("ToolTip"), TEXT("Collision Sphere Radius.\nEditable when CollisonType is set to \"Sphere Collision\""));
				MetaData->SetValue(NewProp_bSphereCollisionIsSelected, TEXT("Category"), TEXT("Planet Actor : General Settings"));
				MetaData->SetValue(NewProp_bSphereCollisionIsSelected, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_bSphereCollisionIsSelected, TEXT("ToolTip"), TEXT("Cannot be edited.\nTrue , if CollisonType is set to \"Sphere Collision\".\nFalse , if CollisonType is set to \"Sphere Collision\"."));
				MetaData->SetValue(NewProp_CollisionType, TEXT("Category"), TEXT("Planet Actor : General Settings"));
				MetaData->SetValue(NewProp_CollisionType, TEXT("ModuleRelativePath"), TEXT("Public/Actors/PlanetActor.h"));
				MetaData->SetValue(NewProp_CollisionType, TEXT("ToolTip"), TEXT("Planet collision type :\n- Mesh Collision.\n- Sphere Collision."));
#endif
			}
		}
		check(OuterClass->GetClass());
		return OuterClass;
	}
	static FCompiledInDefer Z_CompiledInDefer_UClass_APlanetActor(Z_Construct_UClass_APlanetActor, &APlanetActor::StaticClass, TEXT("APlanetActor"), false, nullptr, nullptr, nullptr);
	DEFINE_VTABLE_PTR_HELPER_CTOR(APlanetActor);
	UPackage* Z_Construct_UPackage__Script_CustomGravityPlugin()
	{
		static UPackage* ReturnPackage = NULL;
		if (!ReturnPackage)
		{
			ReturnPackage = CastChecked<UPackage>(StaticFindObjectFast(UPackage::StaticClass(), NULL, FName(TEXT("/Script/CustomGravityPlugin")), false, false));
			ReturnPackage->SetPackageFlags(PKG_CompiledIn | 0x00000000);
			FGuid Guid;
			Guid.A = 0xFD36457C;
			Guid.B = 0xD39B5313;
			Guid.C = 0x00000000;
			Guid.D = 0x00000000;
			ReturnPackage->SetGuid(Guid);

		}
		return ReturnPackage;
	}
#endif

PRAGMA_ENABLE_DEPRECATION_WARNINGS
